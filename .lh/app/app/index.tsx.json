{
    "sourceFile": "app/app/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744682958372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744682958372,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from \"react\";\nimport { View, Text, Image, ScrollView, Dimensions, TouchableOpacity, StatusBar } from \"react-native\";\nimport { StyleSheet, SafeAreaView, useColorScheme} from \"react-native\";\nimport Svg, { Circle } from \"react-native-svg\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport { useRouter } from \"expo-router\";\nimport Animated, {useSharedValue, useAnimatedProps, withTiming, Easing,} from \"react-native-reanimated\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport * as Location from \"expo-location\";\nconst { width } = Dimensions.get('window');\nconst { height } = Dimensions.get('window');\nconst size = 80; \nconst strokeWidth = 6;\nconst radius = (size - strokeWidth) / 2;\nconst circumference = 2 * Math.PI * radius;\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle);\n\nSplashScreen.preventAutoHideAsync(); \n\nexport default function Index() {\n  useEffect(() => {\n    async function loadApp() {\n      try {\n        const isDev = __DEV__;\n        await new Promise(resolve => setTimeout(resolve, isDev ? 500 : 2000));\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        await SplashScreen.hideAsync(); \n      }\n    }\n    loadApp();\n  }, []);\n\n  const router = useRouter();\n\n  const progress = useSharedValue(0);\n  useEffect(() => {\n    progress.value = withTiming(0.33, {\n      duration: 1000,\n      easing: Easing.linear,\n    });\n  }, []);\n\n  const animatedProps = useAnimatedProps(() => ({\n    strokeDashoffset: circumference * (1 - progress.value),\n  }));\n  const colorScheme = useColorScheme();\n  const isDarkMode = colorScheme === 'dark';\n  const handleLocationFlow = async () => {\n      try {\n        const { status } = await Location.getForegroundPermissionsAsync();\n        const isEnabled = await Location.hasServicesEnabledAsync();\n    \n        if (status === \"granted\" && isEnabled) {\n          // Location is already enabled, go directly to welcome\n          router.push(\"/location/welcome\");\n        } else {\n          // Location not enabled, show the enable location page\n          router.push(\"/location/EL\");\n        }\n      } catch (error) {\n        console.warn(\"Location check failed:\", error);\n        router.push(\"/location/EL\"); // fallback\n      }\n    };\n    \n\n  return (\n    <View>\n      <View style={{paddingTop: 30}}>\n        <StatusBar barStyle=\"light-content\" translucent={true} backgroundColor=\"black\" />\n      </View>\n      <View style={[styles.mainUI, { backgroundColor: isDarkMode ? \"#313639\" : \"#f2f2f2\" }]}>\n        <TouchableOpacity onPress={handleLocationFlow}>\n          <Text style={[styles.skip, { color: isDarkMode ? \"#f2f2f2\" : \"#414141\" }]}>Skip</Text>\n        </TouchableOpacity>\n        <View style={styles.picont}>\n          <Image style={styles.pic} source={require('../assets/images/pic1.png')} />\n        </View>\n        <Text style={[styles.made, { color: isDarkMode ? \"#f2f2f2\" : \"#414141\" }]}>Made for Lucenahin</Text>\n        <Text style={[styles.hassle, { color: isDarkMode ? \"#f2f2f2\" : \"#414141\" }]}>Tricycle hassle free ride</Text>\n        <View style={{ alignItems: \"center\", justifyContent: \"center\", flex: 1 }}>\n          <Svg width={size} height={size} style={{ transform: [{ rotate: \"-90deg\" }] }}>\n            {/* Background Circle */}\n            <Circle\n              cx={size / 2}\n              cy={size / 2}\n              r={radius}\n              stroke=\"#5EA7C9\"\n              strokeWidth={strokeWidth}\n              fill=\"none\"\n            />\n            {/* Animated Progress Circle */}\n            <AnimatedCircle\n              cx={size / 2}\n              cy={size / 2}\n              r={radius}\n              stroke=\"#00537A\"\n              strokeWidth={strokeWidth}\n              fill=\"none\"\n              strokeDasharray={circumference}\n              animatedProps={animatedProps}\n              strokeLinecap=\"round\"\n            />\n          </Svg>\n\n          {/* Center Button */}\n          <TouchableOpacity\n            style={{\n              position: \"absolute\",\n              width: size * 0.8,\n              height: size * 0.8,\n              backgroundColor: \"#00537A\",\n              borderRadius: 40,\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n            onPress={() => router.push(\"/on_boarding/sechome\")}\n          >\n            <Ionicons name=\"arrow-forward\" size={32} color=\"white\" />\n          </TouchableOpacity>\n        </View>\n      </View>\n    </View>\n  );\n}\nconst styles = StyleSheet.create({\n  mainUI:{\n    backgroundColor: '#f2f2f2',\n    height: height + 10,\n    width: width,\n  },\n  skip: {\n    padding: 10,\n    paddingTop: 20,\n    fontSize: 18,\n    fontFamily: \"Poppins-Regular\",\n    color: \"#414141\",\n    letterSpacing: 1,\n    textAlign: 'right',\n  },\n  picont: {\n    width: width,\n    paddingTop: 50,\n    backgroundColor: 'transparent',\n  },\n  pic: {\n    width: width,\n    height: width,\n    backgroundColor: 'transparent',\n  },\n  made: {\n    fontSize: 24,\n    fontFamily: \"Poppins-Bold\",\n    fontWeight: \"bold\",\n    color: \"#414141\",\n    textTransform: \"uppercase\",\n    textAlign: \"center\",\n  },\n  hassle: {\n    fontSize: 14,\n    fontFamily: \"Poppins-Regular\",\n    color: \"#A0A0A0\",\n    textAlign: \"center\",\n    marginTop: 5,\n  },\n})"
        }
    ]
}