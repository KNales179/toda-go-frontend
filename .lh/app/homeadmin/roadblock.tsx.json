{
    "sourceFile": "app/homeadmin/roadblock.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1746353699523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746355374306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,15 @@\n import React, { useState } from 'react';\r\n-import { View, Text, StyleSheet, TouchableOpacity, Dimensions } from 'react-native';\r\n+import { View, Text, StyleSheet, TouchableOpacity, Alert, Dimensions } from 'react-native';\r\n import { WebView } from 'react-native-webview';\r\n import { useRouter } from 'expo-router';\r\n \r\n const { width, height } = Dimensions.get('window');\r\n \r\n export default function RoadBlock() {\r\n   const router = useRouter();\r\n-  const [blockedCoords, setBlockedCoords] = useState<string | null>(null);\r\n+  const [startPoint, setStartPoint] = useState<{ lat: number; lng: number } | null>(null);\r\n+  const [endPoint, setEndPoint] = useState<{ lat: number; lng: number } | null>(null);\r\n \r\n   const html = `\r\n     <!DOCTYPE html>\r\n     <html>\r\n@@ -22,30 +23,78 @@\n     <body>\r\n       <div id=\"map\"></div>\r\n       <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n       <script>\r\n-        const sendCoords = (lat, lng) => {\r\n-          window.ReactNativeWebView.postMessage(JSON.stringify({ lat, lng }));\r\n-        };\r\n-\r\n+        let points = [];\r\n         const map = L.map('map').setView([13.9335, 121.6179], 14);\r\n         L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n           maxZoom: 19,\r\n           attribution: 'Â© OpenStreetMap contributors'\r\n         }).addTo(map);\r\n \r\n+        function sendToApp() {\r\n+          if (points.length === 2) {\r\n+            window.ReactNativeWebView.postMessage(JSON.stringify({\r\n+              start: points[0],\r\n+              end: points[1]\r\n+            }));\r\n+          }\r\n+        }\r\n+\r\n         map.on('click', function (e) {\r\n+          if (points.length >= 2) {\r\n+            points = []; map.eachLayer(layer => {\r\n+              if (layer instanceof L.Marker || layer instanceof L.Polyline) map.removeLayer(layer);\r\n+            });\r\n+          }\r\n+\r\n           const lat = e.latlng.lat.toFixed(5);\r\n           const lng = e.latlng.lng.toFixed(5);\r\n-          L.marker([lat, lng]).addTo(map)\r\n-            .bindPopup(\"Blocked: \" + lat + \", \" + lng).openPopup();\r\n-          sendCoords(lat, lng);\r\n+          const point = { lat: parseFloat(lat), lng: parseFloat(lng) };\r\n+          points.push(point);\r\n+\r\n+          L.marker([point.lat, point.lng])\r\n+            .addTo(map)\r\n+            .bindPopup(points.length === 1 ? \"Start Point\" : \"End Point\")\r\n+            .openPopup();\r\n+\r\n+          if (points.length === 2) {\r\n+            L.polyline([points[0], points[1]], { color: 'red' }).addTo(map);\r\n+            sendToApp();\r\n+          }\r\n         });\r\n       </script>\r\n     </body>\r\n     </html>\r\n   `;\r\n \r\n+  const handleSave = async () => {\r\n+    if (!startPoint || !endPoint) {\r\n+      Alert.alert('Incomplete', 'Please select both start and end points first.');\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      const response = await fetch('https://your-backend.onrender.com/api/blocked-roads', {\r\n+        method: 'POST',\r\n+        headers: { 'Content-Type': 'application/json' },\r\n+        body: JSON.stringify({ start: startPoint, end: endPoint })\r\n+      });\r\n+\r\n+      const data = await response.json();\r\n+      if (data.success) {\r\n+        Alert.alert('Success', 'Blocked road saved.');\r\n+        setStartPoint(null);\r\n+        setEndPoint(null);\r\n+      } else {\r\n+        Alert.alert('Error', data.message || 'Something went wrong.');\r\n+      }\r\n+    } catch (err) {\r\n+      console.error(err);\r\n+      Alert.alert('Network Error', 'Failed to connect to server.');\r\n+    }\r\n+  };\r\n+\r\n   return (\r\n     <View style={styles.container}>\r\n       <Text style={styles.title}>Block a Road</Text>\r\n \r\n@@ -56,61 +105,39 @@\n           style={styles.map}\r\n           javaScriptEnabled\r\n           domStorageEnabled\r\n           onMessage={(event) => {\r\n-            const { lat, lng } = JSON.parse(event.nativeEvent.data);\r\n-            setBlockedCoords(`${lat}, ${lng}`);\r\n+            const { start, end } = JSON.parse(event.nativeEvent.data);\r\n+            setStartPoint(start);\r\n+            setEndPoint(end);\r\n           }}\r\n         />\r\n       </View>\r\n \r\n-      {blockedCoords && (\r\n-        <Text style={styles.coordText}>Blocked at: {blockedCoords}</Text>\r\n-      )}\r\n+      <Text style={styles.coordText}>\r\n+        {startPoint && endPoint\r\n+          ? `Start: ${startPoint.lat},${startPoint.lng}\\nEnd: ${endPoint.lat},${endPoint.lng}`\r\n+          : 'Tap two points on a road to block it'}\r\n+      </Text>\r\n \r\n+      <TouchableOpacity style={styles.saveButton} onPress={handleSave}>\r\n+        <Text style={styles.saveText}>ðŸ’¾ Save Blocked Road</Text>\r\n+      </TouchableOpacity>\r\n+\r\n       <TouchableOpacity style={styles.backButton} onPress={() => router.back()}>\r\n         <Text style={styles.backText}>ðŸ”™ Back</Text>\r\n       </TouchableOpacity>\r\n     </View>\r\n   );\r\n }\r\n \r\n const styles = StyleSheet.create({\r\n-  container: {\r\n-    flex: 1,\r\n-    paddingTop: 50,\r\n-    alignItems: 'center',\r\n-    backgroundColor: '#fff',\r\n-  },\r\n-  title: {\r\n-    fontSize: 22,\r\n-    fontWeight: 'bold',\r\n-    marginBottom: 10,\r\n-    color: '#333',\r\n-  },\r\n-  mapContainer: {\r\n-    width: width * 0.9,\r\n-    height: height * 0.5,\r\n-    borderRadius: 10,\r\n-    overflow: 'hidden',\r\n-    marginBottom: 15,\r\n-  },\r\n-  map: {\r\n-    width: '100%',\r\n-    height: '100%',\r\n-  },\r\n-  coordText: {\r\n-    fontSize: 16,\r\n-    color: '#222',\r\n-    marginBottom: 20,\r\n-  },\r\n-  backButton: {\r\n-    backgroundColor: '#5089A3',\r\n-    paddingVertical: 12,\r\n-    paddingHorizontal: 25,\r\n-    borderRadius: 8,\r\n-  },\r\n-  backText: {\r\n-    color: '#fff',\r\n-    fontSize: 16,\r\n-  },\r\n+  container: { flex: 1, paddingTop: 50, alignItems: 'center', backgroundColor: '#fff' },\r\n+  title: { fontSize: 22, fontWeight: 'bold', marginBottom: 10, color: '#333' },\r\n+  mapContainer: { width: width * 0.9, height: height * 0.45, borderRadius: 10, overflow: 'hidden', marginBottom: 15 },\r\n+  map: { width: '100%', height: '100%' },\r\n+  coordText: { fontSize: 16, color: '#222', marginBottom: 10, textAlign: 'center' },\r\n+  saveButton: { backgroundColor: '#3A7A3C', padding: 12, borderRadius: 8, marginBottom: 10 },\r\n+  saveText: { color: '#fff', fontSize: 16 },\r\n+  backButton: { backgroundColor: '#5089A3', padding: 10, paddingHorizontal: 20, borderRadius: 8 },\r\n+  backText: { color: '#fff', fontSize: 15 },\r\n });\r\n"
                },
                {
                    "date": 1746355598107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import React, { useState } from 'react';\r\n import { View, Text, StyleSheet, TouchableOpacity, Alert, Dimensions } from 'react-native';\r\n import { WebView } from 'react-native-webview';\r\n import { useRouter } from 'expo-router';\r\n+import API_BASE_URL from '../../config';\r\n \r\n const { width, height } = Dimensions.get('window');\r\n \r\n export default function RoadBlock() {\r\n@@ -73,13 +74,13 @@\n       return;\r\n     }\r\n \r\n     try {\r\n-      const response = await fetch('https://your-backend.onrender.com/api/blocked-roads', {\r\n-        method: 'POST',\r\n-        headers: { 'Content-Type': 'application/json' },\r\n-        body: JSON.stringify({ start: startPoint, end: endPoint })\r\n-      });\r\n+        const response = await fetch(`${API_BASE_URL}/api/blocked-roads`, {\r\n+            method: 'POST',\r\n+            headers: { 'Content-Type': 'application/json' },\r\n+            body: JSON.stringify({ start: startPoint, end: endPoint })\r\n+        });\r\n \r\n       const data = await response.json();\r\n       if (data.success) {\r\n         Alert.alert('Success', 'Blocked road saved.');\r\n"
                },
                {
                    "date": 1746361521989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useState } from 'react';\r\n import { View, Text, StyleSheet, TouchableOpacity, Alert, Dimensions } from 'react-native';\r\n import { WebView } from 'react-native-webview';\r\n import { useRouter } from 'expo-router';\r\n-import API_BASE_URL from '../../config';\r\n+import {API_BASE_URL}  from '../../config';\r\n \r\n const { width, height } = Dimensions.get('window');\r\n \r\n export default function RoadBlock() {\r\n"
                }
            ],
            "date": 1746353699523,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\r\nimport { View, Text, StyleSheet, TouchableOpacity, Dimensions } from 'react-native';\r\nimport { WebView } from 'react-native-webview';\r\nimport { useRouter } from 'expo-router';\r\n\r\nconst { width, height } = Dimensions.get('window');\r\n\r\nexport default function RoadBlock() {\r\n  const router = useRouter();\r\n  const [blockedCoords, setBlockedCoords] = useState<string | null>(null);\r\n\r\n  const html = `\r\n    <!DOCTYPE html>\r\n    <html>\r\n    <head>\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n      <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" />\r\n      <style>\r\n        html, body, #map { height: 100%; margin: 0; padding: 0; }\r\n      </style>\r\n    </head>\r\n    <body>\r\n      <div id=\"map\"></div>\r\n      <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\r\n      <script>\r\n        const sendCoords = (lat, lng) => {\r\n          window.ReactNativeWebView.postMessage(JSON.stringify({ lat, lng }));\r\n        };\r\n\r\n        const map = L.map('map').setView([13.9335, 121.6179], 14);\r\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n          maxZoom: 19,\r\n          attribution: 'Â© OpenStreetMap contributors'\r\n        }).addTo(map);\r\n\r\n        map.on('click', function (e) {\r\n          const lat = e.latlng.lat.toFixed(5);\r\n          const lng = e.latlng.lng.toFixed(5);\r\n          L.marker([lat, lng]).addTo(map)\r\n            .bindPopup(\"Blocked: \" + lat + \", \" + lng).openPopup();\r\n          sendCoords(lat, lng);\r\n        });\r\n      </script>\r\n    </body>\r\n    </html>\r\n  `;\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>Block a Road</Text>\r\n\r\n      <View style={styles.mapContainer}>\r\n        <WebView\r\n          originWhitelist={['*']}\r\n          source={{ html }}\r\n          style={styles.map}\r\n          javaScriptEnabled\r\n          domStorageEnabled\r\n          onMessage={(event) => {\r\n            const { lat, lng } = JSON.parse(event.nativeEvent.data);\r\n            setBlockedCoords(`${lat}, ${lng}`);\r\n          }}\r\n        />\r\n      </View>\r\n\r\n      {blockedCoords && (\r\n        <Text style={styles.coordText}>Blocked at: {blockedCoords}</Text>\r\n      )}\r\n\r\n      <TouchableOpacity style={styles.backButton} onPress={() => router.back()}>\r\n        <Text style={styles.backText}>ðŸ”™ Back</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    paddingTop: 50,\r\n    alignItems: 'center',\r\n    backgroundColor: '#fff',\r\n  },\r\n  title: {\r\n    fontSize: 22,\r\n    fontWeight: 'bold',\r\n    marginBottom: 10,\r\n    color: '#333',\r\n  },\r\n  mapContainer: {\r\n    width: width * 0.9,\r\n    height: height * 0.5,\r\n    borderRadius: 10,\r\n    overflow: 'hidden',\r\n    marginBottom: 15,\r\n  },\r\n  map: {\r\n    width: '100%',\r\n    height: '100%',\r\n  },\r\n  coordText: {\r\n    fontSize: 16,\r\n    color: '#222',\r\n    marginBottom: 20,\r\n  },\r\n  backButton: {\r\n    backgroundColor: '#5089A3',\r\n    paddingVertical: 12,\r\n    paddingHorizontal: 25,\r\n    borderRadius: 8,\r\n  },\r\n  backText: {\r\n    color: '#fff',\r\n    fontSize: 16,\r\n  },\r\n});\r\n"
        }
    ]
}