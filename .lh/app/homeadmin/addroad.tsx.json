{
    "sourceFile": "app/homeadmin/addroad.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1745847007700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745847305653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n // üìç Admin Add Road Page - addroad.tsx\r\n \r\n import React, { useState } from 'react';\r\n import { View, Text, TextInput, TouchableOpacity, StyleSheet, Dimensions, Switch, Alert } from 'react-native';\r\n-import MapView, { Marker, MapPressEvent } from 'react-native-maps';\r\n+import MapView, { Marker, Polyline, MapPressEvent } from 'react-native-maps';\r\n import { useRouter } from 'expo-router';\r\n import API_BASE_URL from '../../config';\r\n \r\n const { width, height } = Dimensions.get('window');\r\n@@ -80,8 +80,18 @@\n         )}\r\n         {endPoint && (\r\n           <Marker coordinate={{ latitude: endPoint.lat, longitude: endPoint.lng }} pinColor=\"red\" title=\"End Point\" />\r\n         )}\r\n+        {startPoint && endPoint && (\r\n+            <Polyline\r\n+            coordinates={[\r\n+                { latitude: startPoint.lat, longitude: startPoint.lng },\r\n+                { latitude: endPoint.lat, longitude: endPoint.lng },\r\n+            ]}\r\n+            strokeColor=\"#000\" // Black color\r\n+            strokeWidth={4} // Thickness of the line\r\n+            />\r\n+        )}\r\n       </MapView>\r\n \r\n       <View style={styles.form}>\r\n         <TextInput\r\n"
                },
                {
                    "date": 1745847357167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n             coordinates={[\r\n                 { latitude: startPoint.lat, longitude: startPoint.lng },\r\n                 { latitude: endPoint.lat, longitude: endPoint.lng },\r\n             ]}\r\n-            strokeColor=\"#000\" // Black color\r\n+            strokeColor=\"#5089A3\" // Black color\r\n             strokeWidth={4} // Thickness of the line\r\n             />\r\n         )}\r\n       </MapView>\r\n"
                },
                {
                    "date": 1745848780963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-// üìç Admin Add Road Page - addroad.tsx\r\n+// üìç Admin Add Road Page - addroad.tsx (updated for path/multi points)\r\n \r\n import React, { useState } from 'react';\r\n import { View, Text, TextInput, TouchableOpacity, StyleSheet, Dimensions, Switch, Alert } from 'react-native';\r\n import MapView, { Marker, Polyline, MapPressEvent } from 'react-native-maps';\r\n@@ -9,50 +9,63 @@\n const { width, height } = Dimensions.get('window');\r\n \r\n export default function AddRoad() {\r\n   const router = useRouter();\r\n+\r\n   const [startPoint, setStartPoint] = useState<{ lat: number; lng: number } | null>(null);\r\n+  const [middlePoints, setMiddlePoints] = useState<{ lat: number; lng: number }[]>([]);\r\n   const [endPoint, setEndPoint] = useState<{ lat: number; lng: number } | null>(null);\r\n   const [roadName, setRoadName] = useState('');\r\n   const [oneWay, setOneWay] = useState(false);\r\n+  const [mode, setMode] = useState<'start' | 'middle' | 'end' | 'delete'>('start');\r\n \r\n   const handleMapPress = (event: MapPressEvent) => {\r\n     const { latitude, longitude } = event.nativeEvent.coordinate;\r\n-    if (!startPoint) {\r\n+\r\n+    if (mode === 'start') {\r\n       setStartPoint({ lat: latitude, lng: longitude });\r\n-    } else if (!endPoint) {\r\n+    } else if (mode === 'middle') {\r\n+      setMiddlePoints(prev => [...prev, { lat: latitude, lng: longitude }]);\r\n+    } else if (mode === 'end') {\r\n       setEndPoint({ lat: latitude, lng: longitude });\r\n-    } else {\r\n-      // Reset if both are already selected\r\n-      setStartPoint({ lat: latitude, lng: longitude });\r\n-      setEndPoint(null);\r\n+    } else if (mode === 'delete') {\r\n+      // Find and remove the nearest middle point\r\n+      const THRESHOLD = 0.0005; // About 50 meters threshold\r\n+      setMiddlePoints(prev =>\r\n+        prev.filter(mp => {\r\n+          const dist = Math.sqrt(Math.pow(mp.lat - latitude, 2) + Math.pow(mp.lng - longitude, 2));\r\n+          return dist > THRESHOLD;\r\n+        })\r\n+      );\r\n     }\r\n   };\r\n \r\n   const handleSave = async () => {\r\n     if (!startPoint || !endPoint || !roadName) {\r\n-      Alert.alert('Error', 'Please select start point, end point, and enter road name');\r\n+      Alert.alert('Error', 'Please set start point, end point, and road name.');\r\n       return;\r\n     }\r\n \r\n+    const path = [startPoint, ...middlePoints, endPoint];\r\n+\r\n     try {\r\n       const response = await fetch(`${API_BASE_URL}/api/road/add-road`, {\r\n         method: 'POST',\r\n         headers: { 'Content-Type': 'application/json' },\r\n         body: JSON.stringify({\r\n           roadName,\r\n-          startPoint,\r\n-          endPoint,\r\n+          path,\r\n           oneWay,\r\n-          allowedForTricycle: true\r\n+          allowedForTricycle: true,\r\n         })\r\n       });\r\n \r\n       const data = await response.json();\r\n \r\n       if (response.ok) {\r\n         Alert.alert('Success', 'Road saved successfully');\r\n         setStartPoint(null);\r\n+        setMiddlePoints([]);\r\n         setEndPoint(null);\r\n         setRoadName('');\r\n         setOneWay(false);\r\n       } else {\r\n@@ -75,33 +88,68 @@\n         }}\r\n         onPress={handleMapPress}\r\n       >\r\n         {startPoint && (\r\n-          <Marker coordinate={{ latitude: startPoint.lat, longitude: startPoint.lng }} pinColor=\"green\" title=\"Start Point\" />\r\n+          <Marker\r\n+            coordinate={{ latitude: startPoint.lat, longitude: startPoint.lng }}\r\n+            pinColor=\"green\"\r\n+            title=\"Start Point\"\r\n+          />\r\n         )}\r\n+\r\n+        {middlePoints.map((mp, index) => (\r\n+          <Marker\r\n+            key={index}\r\n+            coordinate={{ latitude: mp.lat, longitude: mp.lng }}\r\n+            pinColor=\"blue\"\r\n+            title={`Middle Point ${index + 1}`}\r\n+          />\r\n+        ))}\r\n+\r\n         {endPoint && (\r\n-          <Marker coordinate={{ latitude: endPoint.lat, longitude: endPoint.lng }} pinColor=\"red\" title=\"End Point\" />\r\n+          <Marker\r\n+            coordinate={{ latitude: endPoint.lat, longitude: endPoint.lng }}\r\n+            pinColor=\"red\"\r\n+            title=\"End Point\"\r\n+          />\r\n         )}\r\n+\r\n+        {/* Draw Polyline */}\r\n         {startPoint && endPoint && (\r\n-            <Polyline\r\n+          <Polyline\r\n             coordinates={[\r\n-                { latitude: startPoint.lat, longitude: startPoint.lng },\r\n-                { latitude: endPoint.lat, longitude: endPoint.lng },\r\n+              startPoint,\r\n+              ...middlePoints,\r\n+              endPoint,\r\n             ]}\r\n-            strokeColor=\"#5089A3\" // Black color\r\n-            strokeWidth={4} // Thickness of the line\r\n-            />\r\n+            strokeColor=\"#5089A3\"\r\n+            strokeWidth={4}\r\n+          />\r\n         )}\r\n       </MapView>\r\n \r\n+      {/* Form Section */}\r\n       <View style={styles.form}>\r\n         <TextInput\r\n           style={styles.input}\r\n           placeholder=\"Road Name\"\r\n           value={roadName}\r\n           onChangeText={setRoadName}\r\n         />\r\n \r\n+        {/* Mode Selection */}\r\n+        <View style={styles.modeSelector}>\r\n+          {['start', 'middle', 'end', 'delete'].map((m) => (\r\n+            <TouchableOpacity\r\n+              key={m}\r\n+              style={[styles.modeButton, mode === m ? styles.selectedMode : null]}\r\n+              onPress={() => setMode(m as 'start' | 'middle' | 'end' | 'delete')}\r\n+            >\r\n+              <Text style={styles.modeText}>{m.toUpperCase()}</Text>\r\n+            </TouchableOpacity>\r\n+          ))}\r\n+        </View>\r\n+\r\n         <View style={styles.switchContainer}>\r\n           <Text style={styles.switchText}>One Way?</Text>\r\n           <Switch value={oneWay} onValueChange={setOneWay} />\r\n         </View>\r\n@@ -138,8 +186,30 @@\n     padding: 10,\r\n     marginBottom: 10,\r\n     fontSize: 16,\r\n   },\r\n+  modeSelector: {\r\n+    flexDirection: 'row',\r\n+    justifyContent: 'space-between',\r\n+    marginBottom: 15,\r\n+    flexWrap: 'wrap',\r\n+  },\r\n+  modeButton: {\r\n+    backgroundColor: '#ccc',\r\n+    padding: 10,\r\n+    borderRadius: 8,\r\n+    width: '23%',\r\n+    alignItems: 'center',\r\n+    marginBottom: 10,\r\n+  },\r\n+  selectedMode: {\r\n+    backgroundColor: '#5089A3',\r\n+  },\r\n+  modeText: {\r\n+    color: '#fff',\r\n+    fontSize: 12,\r\n+    fontWeight: 'bold',\r\n+  },\r\n   switchContainer: {\r\n     flexDirection: 'row',\r\n     alignItems: 'center',\r\n     marginBottom: 15,\r\n"
                },
                {
                    "date": 1745848878744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,17 +114,17 @@\n         )}\r\n \r\n         {/* Draw Polyline */}\r\n         {startPoint && endPoint && (\r\n-          <Polyline\r\n+           <Polyline\r\n             coordinates={[\r\n-              startPoint,\r\n-              ...middlePoints,\r\n-              endPoint,\r\n+                { latitude: startPoint.lat, longitude: startPoint.lng },\r\n+                ...middlePoints.map((mp) => ({ latitude: mp.lat, longitude: mp.lng })),\r\n+                { latitude: endPoint.lat, longitude: endPoint.lng },\r\n             ]}\r\n             strokeColor=\"#5089A3\"\r\n             strokeWidth={4}\r\n-          />\r\n+            />\r\n         )}\r\n       </MapView>\r\n \r\n       {/* Form Section */}\r\n"
                },
                {
                    "date": 1745855757689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,80 @@\n-// üìç Admin Add Road Page - addroad.tsx (updated for path/multi points)\r\n+// üìç Admin Add Road Page - addroad.tsx (Updated with Intersections!)\r\n \r\n-import React, { useState } from 'react';\r\n-import { View, Text, TextInput, TouchableOpacity, StyleSheet, Dimensions, Switch, Alert } from 'react-native';\r\n+import React, { useState, useEffect } from 'react';\r\n+import { View, Text, TextInput, TouchableOpacity, StyleSheet, Dimensions, Switch, Alert, StatusBar } from 'react-native';\r\n import MapView, { Marker, Polyline, MapPressEvent } from 'react-native-maps';\r\n import { useRouter } from 'expo-router';\r\n import API_BASE_URL from '../../config';\r\n \r\n-const { width, height } = Dimensions.get('window');\r\n+const { width } = Dimensions.get('window');\r\n \r\n export default function AddRoad() {\r\n   const router = useRouter();\r\n \r\n   const [startPoint, setStartPoint] = useState<{ lat: number; lng: number } | null>(null);\r\n-  const [middlePoints, setMiddlePoints] = useState<{ lat: number; lng: number }[]>([]);\r\n+  const [middlePoints, setMiddlePoints] = useState<{ lat: number; lng: number; isIntersection?: boolean }[]>([]);\r\n   const [endPoint, setEndPoint] = useState<{ lat: number; lng: number } | null>(null);\r\n   const [roadName, setRoadName] = useState('');\r\n   const [oneWay, setOneWay] = useState(false);\r\n-  const [mode, setMode] = useState<'start' | 'middle' | 'end' | 'delete'>('start');\r\n+  const [mode, setMode] = useState<'start' | 'middle' | 'intersection' | 'end' | 'delete'>('start');\r\n+  \r\n+  const [intersections, setIntersections] = useState<{ lat: number; lng: number; roadNames: string[] }[]>([]);\r\n+  const [savedRoads, setSavedRoads] = useState<any[]>([]);\r\n \r\n+  useEffect(() => {\r\n+    fetchIntersections();\r\n+    fetchSavedRoads();\r\n+  }, []);\r\n+\r\n+  const fetchIntersections = async () => {\r\n+    try {\r\n+      const response = await fetch(`${API_BASE_URL}/api/intersection/get-intersections`);\r\n+      const data = await response.json();\r\n+      setIntersections(data);\r\n+    } catch (error) {\r\n+      console.error('Failed to fetch intersections:', error);\r\n+    }\r\n+  };\r\n+\r\n+  const fetchSavedRoads = async () => {\r\n+    try {\r\n+      const response = await fetch(`${API_BASE_URL}/api/road/get-roads`);\r\n+      const data = await response.json();\r\n+      setSavedRoads(data);\r\n+    } catch (error) {\r\n+      console.error('Failed to fetch saved roads:', error);\r\n+    }\r\n+  };\r\n+\r\n   const handleMapPress = (event: MapPressEvent) => {\r\n     const { latitude, longitude } = event.nativeEvent.coordinate;\r\n \r\n     if (mode === 'start') {\r\n       setStartPoint({ lat: latitude, lng: longitude });\r\n     } else if (mode === 'middle') {\r\n       setMiddlePoints(prev => [...prev, { lat: latitude, lng: longitude }]);\r\n+    } else if (mode === 'intersection') {\r\n+      // Find nearest intersection\r\n+      const clickedIntersection = intersections.find(intersection => {\r\n+        const dist = Math.sqrt(\r\n+          Math.pow(intersection.lat - latitude, 2) + Math.pow(intersection.lng - longitude, 2)\r\n+        );\r\n+        return dist < 0.0005; // about 50 meters threshold\r\n+      });\r\n+\r\n+      if (clickedIntersection) {\r\n+        setMiddlePoints(prev => [\r\n+          ...prev,\r\n+          { lat: clickedIntersection.lat, lng: clickedIntersection.lng, isIntersection: true },\r\n+        ]);\r\n+      } else {\r\n+        Alert.alert('Error', 'Please click on an existing intersection.');\r\n+      }\r\n     } else if (mode === 'end') {\r\n       setEndPoint({ lat: latitude, lng: longitude });\r\n     } else if (mode === 'delete') {\r\n-      // Find and remove the nearest middle point\r\n-      const THRESHOLD = 0.0005; // About 50 meters threshold\r\n+      const THRESHOLD = 0.0005;\r\n       setMiddlePoints(prev =>\r\n         prev.filter(mp => {\r\n           const dist = Math.sqrt(Math.pow(mp.lat - latitude, 2) + Math.pow(mp.lng - longitude, 2));\r\n           return dist > THRESHOLD;\r\n@@ -55,9 +99,9 @@\n           roadName,\r\n           path,\r\n           oneWay,\r\n           allowedForTricycle: true,\r\n-        })\r\n+        }),\r\n       });\r\n \r\n       const data = await response.json();\r\n \r\n@@ -67,8 +111,9 @@\n         setMiddlePoints([]);\r\n         setEndPoint(null);\r\n         setRoadName('');\r\n         setOneWay(false);\r\n+        fetchSavedRoads(); // üî• Refresh saved roads after saving\r\n       } else {\r\n         Alert.alert('Error', data.message || 'Saving failed');\r\n       }\r\n     } catch (error) {\r\n@@ -77,8 +122,10 @@\n   };\r\n \r\n   return (\r\n     <View style={styles.container}>\r\n+      <StatusBar barStyle=\"dark-content\" translucent backgroundColor=\"transparent\" />\r\n+      \r\n       <MapView\r\n         style={styles.map}\r\n         initialRegion={{\r\n           latitude: 13.9361,\r\n@@ -87,8 +134,32 @@\n           longitudeDelta: 0.01,\r\n         }}\r\n         onPress={handleMapPress}\r\n       >\r\n+        {/* Show saved roads */}\r\n+        {savedRoads.map((road, idx) => (\r\n+          <Polyline\r\n+            key={idx}\r\n+            coordinates={road.path.map((p: any) => ({\r\n+              latitude: p.lat,\r\n+              longitude: p.lng,\r\n+            }))}\r\n+            strokeColor=\"#5089A3\"\r\n+            strokeWidth={4}\r\n+          />\r\n+        ))}\r\n+\r\n+        {/* Show existing intersections */}\r\n+        {intersections.map((intersection, index) => (\r\n+          <Marker\r\n+            key={index}\r\n+            coordinate={{ latitude: intersection.lat, longitude: intersection.lng }}\r\n+            pinColor=\"orange\"\r\n+            title={`${intersection.roadNames[0]} x ${intersection.roadNames[1]}`}\r\n+          />\r\n+        ))}\r\n+\r\n+        {/* Show current working markers */}\r\n         {startPoint && (\r\n           <Marker\r\n             coordinate={{ latitude: startPoint.lat, longitude: startPoint.lng }}\r\n             pinColor=\"green\"\r\n@@ -99,10 +170,10 @@\n         {middlePoints.map((mp, index) => (\r\n           <Marker\r\n             key={index}\r\n             coordinate={{ latitude: mp.lat, longitude: mp.lng }}\r\n-            pinColor=\"blue\"\r\n-            title={`Middle Point ${index + 1}`}\r\n+            pinColor={mp.isIntersection ? \"orange\" : \"blue\"}\r\n+            title={mp.isIntersection ? \"Intersection\" : `Middle Point ${index + 1}`}\r\n           />\r\n         ))}\r\n \r\n         {endPoint && (\r\n@@ -112,19 +183,19 @@\n             title=\"End Point\"\r\n           />\r\n         )}\r\n \r\n-        {/* Draw Polyline */}\r\n+        {/* Current working Polyline */}\r\n         {startPoint && endPoint && (\r\n-           <Polyline\r\n+          <Polyline\r\n             coordinates={[\r\n-                { latitude: startPoint.lat, longitude: startPoint.lng },\r\n-                ...middlePoints.map((mp) => ({ latitude: mp.lat, longitude: mp.lng })),\r\n-                { latitude: endPoint.lat, longitude: endPoint.lng },\r\n+              { latitude: startPoint.lat, longitude: startPoint.lng },\r\n+              ...middlePoints.map((mp) => ({ latitude: mp.lat, longitude: mp.lng })),\r\n+              { latitude: endPoint.lat, longitude: endPoint.lng },\r\n             ]}\r\n-            strokeColor=\"#5089A3\"\r\n-            strokeWidth={4}\r\n-            />\r\n+            strokeColor=\"#FF0000\"\r\n+            strokeWidth={2}\r\n+          />\r\n         )}\r\n       </MapView>\r\n \r\n       {/* Form Section */}\r\n@@ -137,13 +208,13 @@\n         />\r\n \r\n         {/* Mode Selection */}\r\n         <View style={styles.modeSelector}>\r\n-          {['start', 'middle', 'end', 'delete'].map((m) => (\r\n+          {['start', 'middle', 'intersection', 'end', 'delete'].map((m) => (\r\n             <TouchableOpacity\r\n               key={m}\r\n               style={[styles.modeButton, mode === m ? styles.selectedMode : null]}\r\n-              onPress={() => setMode(m as 'start' | 'middle' | 'end' | 'delete')}\r\n+              onPress={() => setMode(m as 'start' | 'middle' | 'intersection' | 'end' | 'delete')}\r\n             >\r\n               <Text style={styles.modeText}>{m.toUpperCase()}</Text>\r\n             </TouchableOpacity>\r\n           ))}\r\n@@ -192,54 +263,5 @@\n     justifyContent: 'space-between',\r\n     marginBottom: 15,\r\n     flexWrap: 'wrap',\r\n   },\r\n-  modeButton: {\r\n-    backgroundColor: '#ccc',\r\n-    padding: 10,\r\n-    borderRadius: 8,\r\n-    width: '23%',\r\n-    alignItems: 'center',\r\n-    marginBottom: 10,\r\n-  },\r\n-  selectedMode: {\r\n-    backgroundColor: '#5089A3',\r\n-  },\r\n-  modeText: {\r\n-    color: '#fff',\r\n-    fontSize: 12,\r\n-    fontWeight: 'bold',\r\n-  },\r\n-  switchContainer: {\r\n-    flexDirection: 'row',\r\n-    alignItems: 'center',\r\n-    marginBottom: 15,\r\n-    justifyContent: 'space-between',\r\n-  },\r\n-  switchText: {\r\n-    fontSize: 16,\r\n-    color: '#414141',\r\n-  },\r\n-  saveButton: {\r\n-    backgroundColor: '#5089A3',\r\n-    padding: 15,\r\n-    borderRadius: 8,\r\n-    alignItems: 'center',\r\n-    marginBottom: 10,\r\n-  },\r\n-  saveButtonText: {\r\n-    color: '#fff',\r\n-    fontWeight: 'bold',\r\n-    fontSize: 16,\r\n-  },\r\n-  backButton: {\r\n-    backgroundColor: '#DD1F1F',\r\n-    padding: 12,\r\n-    borderRadius: 8,\r\n-    alignItems: 'center',\r\n-  },\r\n-  backButtonText: {\r\n-    color: '#fff',\r\n-    fontWeight: 'bold',\r\n-    fontSize: 16,\r\n-  },\r\n-});\r\n+  mode\r\n"
                },
                {
                    "date": 1745855778216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,5 +263,54 @@\n     justifyContent: 'space-between',\r\n     marginBottom: 15,\r\n     flexWrap: 'wrap',\r\n   },\r\n-  mode\r\n+  modeButton: {\r\n+    backgroundColor: '#ccc',\r\n+    padding: 10,\r\n+    borderRadius: 8,\r\n+    width: '30%',\r\n+    alignItems: 'center',\r\n+    marginBottom: 10,\r\n+  },\r\n+  selectedMode: {\r\n+    backgroundColor: '#5089A3',\r\n+  },\r\n+  modeText: {\r\n+    color: '#fff',\r\n+    fontSize: 12,\r\n+    fontWeight: 'bold',\r\n+  },\r\n+  switchContainer: {\r\n+    flexDirection: 'row',\r\n+    alignItems: 'center',\r\n+    marginBottom: 15,\r\n+    justifyContent: 'space-between',\r\n+  },\r\n+  switchText: {\r\n+    fontSize: 16,\r\n+    color: '#414141',\r\n+  },\r\n+  saveButton: {\r\n+    backgroundColor: '#5089A3',\r\n+    padding: 15,\r\n+    borderRadius: 8,\r\n+    alignItems: 'center',\r\n+    marginBottom: 10,\r\n+  },\r\n+  saveButtonText: {\r\n+    color: '#fff',\r\n+    fontWeight: 'bold',\r\n+    fontSize: 16,\r\n+  },\r\n+  backButton: {\r\n+    backgroundColor: '#DD1F1F',\r\n+    padding: 12,\r\n+    borderRadius: 8,\r\n+    alignItems: 'center',\r\n+  },\r\n+  backButtonText: {\r\n+    color: '#fff',\r\n+    fontWeight: 'bold',\r\n+    fontSize: 16,\r\n+  },\r\n+});\r\n"
                }
            ],
            "date": 1745847007700,
            "name": "Commit-0",
            "content": "// üìç Admin Add Road Page - addroad.tsx\r\n\r\nimport React, { useState } from 'react';\r\nimport { View, Text, TextInput, TouchableOpacity, StyleSheet, Dimensions, Switch, Alert } from 'react-native';\r\nimport MapView, { Marker, MapPressEvent } from 'react-native-maps';\r\nimport { useRouter } from 'expo-router';\r\nimport API_BASE_URL from '../../config';\r\n\r\nconst { width, height } = Dimensions.get('window');\r\n\r\nexport default function AddRoad() {\r\n  const router = useRouter();\r\n  const [startPoint, setStartPoint] = useState<{ lat: number; lng: number } | null>(null);\r\n  const [endPoint, setEndPoint] = useState<{ lat: number; lng: number } | null>(null);\r\n  const [roadName, setRoadName] = useState('');\r\n  const [oneWay, setOneWay] = useState(false);\r\n\r\n  const handleMapPress = (event: MapPressEvent) => {\r\n    const { latitude, longitude } = event.nativeEvent.coordinate;\r\n    if (!startPoint) {\r\n      setStartPoint({ lat: latitude, lng: longitude });\r\n    } else if (!endPoint) {\r\n      setEndPoint({ lat: latitude, lng: longitude });\r\n    } else {\r\n      // Reset if both are already selected\r\n      setStartPoint({ lat: latitude, lng: longitude });\r\n      setEndPoint(null);\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!startPoint || !endPoint || !roadName) {\r\n      Alert.alert('Error', 'Please select start point, end point, and enter road name');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/road/add-road`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          roadName,\r\n          startPoint,\r\n          endPoint,\r\n          oneWay,\r\n          allowedForTricycle: true\r\n        })\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        Alert.alert('Success', 'Road saved successfully');\r\n        setStartPoint(null);\r\n        setEndPoint(null);\r\n        setRoadName('');\r\n        setOneWay(false);\r\n      } else {\r\n        Alert.alert('Error', data.message || 'Saving failed');\r\n      }\r\n    } catch (error) {\r\n      Alert.alert('Error', 'Network request failed');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <MapView\r\n        style={styles.map}\r\n        initialRegion={{\r\n          latitude: 13.9361,\r\n          longitude: 121.6125,\r\n          latitudeDelta: 0.01,\r\n          longitudeDelta: 0.01,\r\n        }}\r\n        onPress={handleMapPress}\r\n      >\r\n        {startPoint && (\r\n          <Marker coordinate={{ latitude: startPoint.lat, longitude: startPoint.lng }} pinColor=\"green\" title=\"Start Point\" />\r\n        )}\r\n        {endPoint && (\r\n          <Marker coordinate={{ latitude: endPoint.lat, longitude: endPoint.lng }} pinColor=\"red\" title=\"End Point\" />\r\n        )}\r\n      </MapView>\r\n\r\n      <View style={styles.form}>\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder=\"Road Name\"\r\n          value={roadName}\r\n          onChangeText={setRoadName}\r\n        />\r\n\r\n        <View style={styles.switchContainer}>\r\n          <Text style={styles.switchText}>One Way?</Text>\r\n          <Switch value={oneWay} onValueChange={setOneWay} />\r\n        </View>\r\n\r\n        <TouchableOpacity style={styles.saveButton} onPress={handleSave}>\r\n          <Text style={styles.saveButtonText}>Save Road</Text>\r\n        </TouchableOpacity>\r\n\r\n        <TouchableOpacity style={styles.backButton} onPress={() => router.back()}>\r\n          <Text style={styles.backButtonText}>‚¨Ö Back</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: { flex: 1 },\r\n  map: { flex: 1 },\r\n  form: {\r\n    position: 'absolute',\r\n    bottom: 0,\r\n    width: width,\r\n    backgroundColor: '#fff',\r\n    padding: 20,\r\n    borderTopLeftRadius: 20,\r\n    borderTopRightRadius: 20,\r\n    elevation: 5,\r\n  },\r\n  input: {\r\n    borderWidth: 1,\r\n    borderColor: '#ccc',\r\n    borderRadius: 8,\r\n    padding: 10,\r\n    marginBottom: 10,\r\n    fontSize: 16,\r\n  },\r\n  switchContainer: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    marginBottom: 15,\r\n    justifyContent: 'space-between',\r\n  },\r\n  switchText: {\r\n    fontSize: 16,\r\n    color: '#414141',\r\n  },\r\n  saveButton: {\r\n    backgroundColor: '#5089A3',\r\n    padding: 15,\r\n    borderRadius: 8,\r\n    alignItems: 'center',\r\n    marginBottom: 10,\r\n  },\r\n  saveButtonText: {\r\n    color: '#fff',\r\n    fontWeight: 'bold',\r\n    fontSize: 16,\r\n  },\r\n  backButton: {\r\n    backgroundColor: '#DD1F1F',\r\n    padding: 12,\r\n    borderRadius: 8,\r\n    alignItems: 'center',\r\n  },\r\n  backButtonText: {\r\n    color: '#fff',\r\n    fontWeight: 'bold',\r\n    fontSize: 16,\r\n  },\r\n});\r\n"
        }
    ]
}