{
    "sourceFile": "app/homeadmin/addintersection.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1745855661199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1745855661199,
            "name": "Commit-0",
            "content": "// üìç Admin Add Intersection Page - addintersection.tsx (FINAL VERSION)\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { View, Text, TextInput, TouchableOpacity, StyleSheet, Dimensions, Alert, StatusBar } from 'react-native';\r\nimport MapView, { Marker, MapPressEvent } from 'react-native-maps';\r\nimport { useRouter } from 'expo-router';\r\nimport API_BASE_URL from '../../config';\r\n\r\nconst { width } = Dimensions.get('window');\r\n\r\nexport default function AddIntersection() {\r\n  const router = useRouter();\r\n\r\n  const [selectedLocation, setSelectedLocation] = useState<{ lat: number; lng: number } | null>(null);\r\n  const [road1, setRoad1] = useState('');\r\n  const [road2, setRoad2] = useState('');\r\n  const [intersections, setIntersections] = useState<{ lat: number; lng: number; roadNames: string[] }[]>([]);\r\n\r\n  useEffect(() => {\r\n    fetchIntersections();\r\n  }, []);\r\n\r\n  const fetchIntersections = async () => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/intersection/get-intersections`);\r\n      const data = await response.json();\r\n      setIntersections(data);\r\n    } catch (error) {\r\n      console.error('Failed to fetch intersections:', error);\r\n    }\r\n  };\r\n\r\n  const handleMapPress = (event: MapPressEvent) => {\r\n    const { latitude, longitude } = event.nativeEvent.coordinate;\r\n    setSelectedLocation({ lat: latitude, lng: longitude });\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!selectedLocation || !road1 || !road2) {\r\n      Alert.alert('Error', 'Please select a location and fill both road names.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/intersection/add-intersection`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          lat: selectedLocation.lat,\r\n          lng: selectedLocation.lng,\r\n          roadNames: [road1, road2],\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        Alert.alert('Success', 'Intersection saved!');\r\n        setSelectedLocation(null);\r\n        setRoad1('');\r\n        setRoad2('');\r\n        fetchIntersections(); // üî• Refresh intersections after saving\r\n      } else {\r\n        Alert.alert('Error', data.message || 'Saving failed');\r\n      }\r\n    } catch (error) {\r\n      Alert.alert('Error', 'Network request failed');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <StatusBar barStyle=\"dark-content\" translucent backgroundColor=\"transparent\" />\r\n      \r\n      <MapView\r\n        style={styles.map}\r\n        initialRegion={{\r\n          latitude: 13.9361,\r\n          longitude: 121.6125,\r\n          latitudeDelta: 0.01,\r\n          longitudeDelta: 0.01,\r\n        }}\r\n        onPress={handleMapPress}\r\n      >\r\n        {/* EXISTING INTERSECTIONS */}\r\n        {intersections.map((intersection, index) => (\r\n          <Marker\r\n            key={index}\r\n            coordinate={{ latitude: intersection.lat, longitude: intersection.lng }}\r\n            pinColor=\"orange\"\r\n            title={`${intersection.roadNames[0]} x ${intersection.roadNames[1]}`}\r\n          />\r\n        ))}\r\n\r\n        {/* NEW SELECTED LOCATION */}\r\n        {selectedLocation && (\r\n          <Marker\r\n            coordinate={{ latitude: selectedLocation.lat, longitude: selectedLocation.lng }}\r\n            pinColor=\"green\"\r\n            title=\"New Intersection\"\r\n          />\r\n        )}\r\n      </MapView>\r\n\r\n      {/* Form Section */}\r\n      <View style={styles.form}>\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder=\"First Road Name\"\r\n          value={road1}\r\n          onChangeText={setRoad1}\r\n        />\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder=\"Second Road Name\"\r\n          value={road2}\r\n          onChangeText={setRoad2}\r\n        />\r\n\r\n        <TouchableOpacity style={styles.saveButton} onPress={handleSave}>\r\n          <Text style={styles.saveButtonText}>Save Intersection</Text>\r\n        </TouchableOpacity>\r\n\r\n        <TouchableOpacity style={styles.backButton} onPress={() => router.back()}>\r\n          <Text style={styles.backButtonText}>‚¨Ö Back</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: { flex: 1 },\r\n  map: { flex: 1 },\r\n  form: {\r\n    position: 'absolute',\r\n    bottom: 0,\r\n    width: width,\r\n    backgroundColor: '#fff',\r\n    padding: 20,\r\n    borderTopLeftRadius: 20,\r\n    borderTopRightRadius: 20,\r\n    elevation: 5,\r\n  },\r\n  input: {\r\n    borderWidth: 1,\r\n    borderColor: '#ccc',\r\n    borderRadius: 8,\r\n    padding: 10,\r\n    marginBottom: 10,\r\n    fontSize: 16,\r\n  },\r\n  saveButton: {\r\n    backgroundColor: '#5089A3',\r\n    padding: 15,\r\n    borderRadius: 8,\r\n    alignItems: 'center',\r\n    marginBottom: 10,\r\n  },\r\n  saveButtonText: {\r\n    color: '#fff',\r\n    fontWeight: 'bold',\r\n    fontSize: 16,\r\n  },\r\n  backButton: {\r\n    backgroundColor: '#DD1F1F',\r\n    padding: 12,\r\n    borderRadius: 8,\r\n    alignItems: 'center',\r\n  },\r\n  backButtonText: {\r\n    color: '#fff',\r\n    fontWeight: 'bold',\r\n    fontSize: 16,\r\n  },\r\n});\r\n"
        }
    ]
}