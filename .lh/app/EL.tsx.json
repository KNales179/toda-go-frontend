{
    "sourceFile": "app/EL.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1742801603848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1742801852207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,14 @@\n     const checkLocationPermission = async () => {\r\n         const { status } = await Location.getForegroundPermissionsAsync();\r\n         if (status === \"granted\") {\r\n             setIsLocationEnabled(true);\r\n-            router.push(\"/welcome\"); // Navigate immediately if location is already enabled\r\n+            \r\n+            // Show alert and wait 2 seconds before proceeding\r\n+            Alert.alert(\"Location Already Enabled\", \"You will be redirected shortly...\");\r\n+            setTimeout(() => {\r\n+                router.push(\"/welcome\");\r\n+            }, 2000); // 2-second delay\r\n         }\r\n     };\r\n \r\n     // Function to request location permissions\r\n@@ -33,11 +38,13 @@\n         // Get user's location\r\n         const location = await Location.getCurrentPositionAsync({});\r\n         console.log(\"User's location:\", location);\r\n \r\n-        Alert.alert(\"Location Enabled\", \"Your location has been accessed successfully.\", [\r\n-            { text: \"OK\", onPress: () => router.push(\"/welcome\") } // Navigate after success\r\n-        ]);\r\n+        // Show success alert and wait 2 seconds before navigating\r\n+        Alert.alert(\"Location Enabled\", \"Your location has been accessed successfully.\");\r\n+        setTimeout(() => {\r\n+            router.push(\"/welcome\");\r\n+        }, 2000);\r\n     };\r\n \r\n     // Check location status on mount\r\n     useEffect(() => {\r\n@@ -111,30 +118,5 @@\n     color: \"#A0A0A0\",\r\n     textAlign: \"center\",\r\n     marginTop: 10,\r\n     marginHorizontal: 30,\r\n-    fontFamily: \"Poppins-Regular\",\r\n-  },\r\n-  button: {\r\n-    width: \"90%\",\r\n-    margin: 30,\r\n-  },\r\n-  btntext: {\r\n-    textAlign: \"center\",\r\n-    color: \"#FFFFFF\",\r\n-    backgroundColor: \"#5089A3\",\r\n-    borderRadius: 10,\r\n-    fontSize: 20,\r\n-    padding: 20,\r\n-    fontWeight: \"600\",\r\n-    fontFamily: \"Poppins-SemiBold\",\r\n-  },\r\n-  btntext2: {\r\n-    textAlign: \"center\",\r\n-    color: \"#B8B8B8\",\r\n-    borderRadius: 10,\r\n-    fontSize: 20,\r\n-    padding: 20,\r\n-    fontWeight: \"600\",\r\n-    fontFamily: \"Poppins-SemiBold\",\r\n-  },\r\n-});\r\n+    font\r\n"
                },
                {
                    "date": 1742801858174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,5 +118,30 @@\n     color: \"#A0A0A0\",\r\n     textAlign: \"center\",\r\n     marginTop: 10,\r\n     marginHorizontal: 30,\r\n-    font\r\n+    fontFamily: \"Poppins-Regular\",\r\n+  },\r\n+  button: {\r\n+    width: \"90%\",\r\n+    margin: 30,\r\n+  },\r\n+  btntext: {\r\n+    textAlign: \"center\",\r\n+    color: \"#FFFFFF\",\r\n+    backgroundColor: \"#5089A3\",\r\n+    borderRadius: 10,\r\n+    fontSize: 20,\r\n+    padding: 20,\r\n+    fontWeight: \"600\",\r\n+    fontFamily: \"Poppins-SemiBold\",\r\n+  },\r\n+  btntext2: {\r\n+    textAlign: \"center\",\r\n+    color: \"#B8B8B8\",\r\n+    borderRadius: 10,\r\n+    fontSize: 20,\r\n+    padding: 20,\r\n+    fontWeight: \"600\",\r\n+    fontFamily: \"Poppins-SemiBold\",\r\n+  },\r\n+});\r\n"
                },
                {
                    "date": 1742802024349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import React, { useEffect, useState } from \"react\";\r\n-import { View, Text, Image, ImageBackground, StyleSheet, Dimensions, TouchableOpacity, Alert } from \"react-native\";\r\n+import { View, Text, Image, ImageBackground, StyleSheet, Dimensions, TouchableOpacity } from \"react-native\";\r\n import * as Location from \"expo-location\";\r\n import { useRouter } from \"expo-router\";\r\n+import Toast from \"react-native-root-toast\"; // Import Toast\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function EL() {\r\n@@ -13,36 +14,46 @@\n     const checkLocationPermission = async () => {\r\n         const { status } = await Location.getForegroundPermissionsAsync();\r\n         if (status === \"granted\") {\r\n             setIsLocationEnabled(true);\r\n-            \r\n-            // Show alert and wait 2 seconds before proceeding\r\n-            Alert.alert(\"Location Already Enabled\", \"You will be redirected shortly...\");\r\n+\r\n+            // Show a toast notification for 2 seconds\r\n+            let toast = Toast.show(\"Location Already Enabled. Redirecting...\", {\r\n+                duration: Toast.durations.SHORT,\r\n+                position: Toast.positions.CENTER,\r\n+            });\r\n+\r\n+            // Redirect after 2 seconds\r\n             setTimeout(() => {\r\n+                Toast.hide(toast); // Hide the toast before navigating\r\n                 router.push(\"/welcome\");\r\n-            }, 2000); // 2-second delay\r\n+            }, 2000);\r\n         }\r\n     };\r\n \r\n     // Function to request location permissions\r\n     const requestLocationPermission = async () => {\r\n         const { status } = await Location.requestForegroundPermissionsAsync();\r\n         if (status !== \"granted\") {\r\n-            Alert.alert(\r\n-                \"Location Access Denied\",\r\n-                \"Please enable location services in your settings.\",\r\n-                [{ text: \"OK\" }]\r\n-            );\r\n+            Toast.show(\"Location Access Denied. Enable it in settings.\", {\r\n+                duration: Toast.durations.SHORT,\r\n+                position: Toast.positions.CENTER,\r\n+            });\r\n             return;\r\n         }\r\n \r\n         // Get user's location\r\n         const location = await Location.getCurrentPositionAsync({});\r\n         console.log(\"User's location:\", location);\r\n \r\n-        // Show success alert and wait 2 seconds before navigating\r\n-        Alert.alert(\"Location Enabled\", \"Your location has been accessed successfully.\");\r\n+        // Show a success toast and redirect\r\n+        let toast = Toast.show(\"Location Enabled. Redirecting...\", {\r\n+            duration: Toast.durations.SHORT,\r\n+            position: Toast.positions.CENTER,\r\n+        });\r\n+\r\n         setTimeout(() => {\r\n+            Toast.hide(toast); // Hide the toast before navigating\r\n             router.push(\"/welcome\");\r\n         }, 2000);\r\n     };\r\n \r\n"
                },
                {
                    "date": 1742802311020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import React, { useEffect, useState } from \"react\";\r\n-import { View, Text, Image, ImageBackground, StyleSheet, Dimensions, TouchableOpacity } from \"react-native\";\r\n+import { View, Text, Image, ImageBackground, StyleSheet, Dimensions, TouchableOpacity, Alert } from \"react-native\";\r\n import * as Location from \"expo-location\";\r\n import { useRouter } from \"expo-router\";\r\n-import Toast from \"react-native-root-toast\"; // Import Toast\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function EL() {\r\n@@ -14,46 +13,36 @@\n     const checkLocationPermission = async () => {\r\n         const { status } = await Location.getForegroundPermissionsAsync();\r\n         if (status === \"granted\") {\r\n             setIsLocationEnabled(true);\r\n-\r\n-            // Show a toast notification for 2 seconds\r\n-            let toast = Toast.show(\"Location Already Enabled. Redirecting...\", {\r\n-                duration: Toast.durations.SHORT,\r\n-                position: Toast.positions.CENTER,\r\n-            });\r\n-\r\n-            // Redirect after 2 seconds\r\n+            \r\n+            // Show alert and wait 2 seconds before proceeding\r\n+            Alert.alert(\"Location Already Enabled\", \"You will be redirected shortly...\");\r\n             setTimeout(() => {\r\n-                Toast.hide(toast); // Hide the toast before navigating\r\n                 router.push(\"/welcome\");\r\n-            }, 2000);\r\n+            }, 2000); // 2-second delay\r\n         }\r\n     };\r\n \r\n     // Function to request location permissions\r\n     const requestLocationPermission = async () => {\r\n         const { status } = await Location.requestForegroundPermissionsAsync();\r\n         if (status !== \"granted\") {\r\n-            Toast.show(\"Location Access Denied. Enable it in settings.\", {\r\n-                duration: Toast.durations.SHORT,\r\n-                position: Toast.positions.CENTER,\r\n-            });\r\n+            Alert.alert(\r\n+                \"Location Access Denied\",\r\n+                \"Please enable location services in your settings.\",\r\n+                [{ text: \"OK\" }]\r\n+            );\r\n             return;\r\n         }\r\n \r\n         // Get user's location\r\n         const location = await Location.getCurrentPositionAsync({});\r\n         console.log(\"User's location:\", location);\r\n \r\n-        // Show a success toast and redirect\r\n-        let toast = Toast.show(\"Location Enabled. Redirecting...\", {\r\n-            duration: Toast.durations.SHORT,\r\n-            position: Toast.positions.CENTER,\r\n-        });\r\n-\r\n+        // Show success alert and wait 2 seconds before navigating\r\n+        Alert.alert(\"Location Enabled\", \"Your location has been accessed successfully.\");\r\n         setTimeout(() => {\r\n-            Toast.hide(toast); // Hide the toast before navigating\r\n             router.push(\"/welcome\");\r\n         }, 2000);\r\n     };\r\n \r\n"
                },
                {
                    "date": 1742802576517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,19 +10,20 @@\n     const [isLocationEnabled, setIsLocationEnabled] = useState(false);\r\n \r\n     // Function to check if location is already enabled\r\n     const checkLocationPermission = async () => {\r\n-        const { status } = await Location.getForegroundPermissionsAsync();\r\n-        if (status === \"granted\") {\r\n-            setIsLocationEnabled(true);\r\n-            \r\n-            // Show alert and wait 2 seconds before proceeding\r\n-            Alert.alert(\"Location Already Enabled\", \"You will be redirected shortly...\");\r\n-            setTimeout(() => {\r\n-                router.push(\"/welcome\");\r\n-            }, 2000); // 2-second delay\r\n-        }\r\n+      const { status } = await Location.getForegroundPermissionsAsync();\r\n+      const isEnabled = await Location.hasServicesEnabledAsync();\r\n+  \r\n+      if (status === \"granted\" && isEnabled) {\r\n+        setIsLocationEnabled(true);\r\n+        \r\n+        // Show alert and redirect after 2 seconds\r\n+        Alert.alert(\"Location Already Enabled\", \"You will be redirected shortly...\");\r\n+        setTimeout(() => {router.push(\"/welcome\");}, 2000);\r\n+      }\r\n     };\r\n+    \r\n \r\n     // Function to request location permissions\r\n     const requestLocationPermission = async () => {\r\n         const { status } = await Location.requestForegroundPermissionsAsync();\r\n"
                },
                {
                    "date": 1742802799586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,11 @@\n       if (status === \"granted\" && isEnabled) {\r\n         setIsLocationEnabled(true);\r\n         \r\n         // Show alert and redirect after 2 seconds\r\n-        Alert.alert(\"Location Already Enabled\", \"You will be redirected shortly...\");\r\n-        setTimeout(() => {router.push(\"/welcome\");}, 2000);\r\n+        Alert.alert(\"Location Already Enabled\", \"You will be redirected shortly...\", [\r\n+          { text: \"OK\", onPress: () => router.push(\"/welcome\") } \r\n+        ]);\r\n       }\r\n     };\r\n     \r\n \r\n@@ -40,12 +41,11 @@\n         const location = await Location.getCurrentPositionAsync({});\r\n         console.log(\"User's location:\", location);\r\n \r\n         // Show success alert and wait 2 seconds before navigating\r\n-        Alert.alert(\"Location Enabled\", \"Your location has been accessed successfully.\");\r\n-        setTimeout(() => {\r\n-            router.push(\"/welcome\");\r\n-        }, 2000);\r\n+        Alert.alert(\"Location Enabled\", \"Your location has been accessed successfully.\", [\r\n+          { text: \"OK\", onPress: () => router.push(\"/welcome\") } \r\n+        ]);\r\n     };\r\n \r\n     // Check location status on mount\r\n     useEffect(() => {\r\n"
                },
                {
                    "date": 1742802821182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n       if (status === \"granted\" && isEnabled) {\r\n         setIsLocationEnabled(true);\r\n         \r\n         // Show alert and redirect after 2 seconds\r\n-        Alert.alert(\"Location Already Enabled\", \"You will be redirected shortly...\", [\r\n+        Alert.alert(\"Location Already Enabled\", \"Proceed to Login...\", [\r\n           { text: \"OK\", onPress: () => router.push(\"/welcome\") } \r\n         ]);\r\n       }\r\n     };\r\n"
                },
                {
                    "date": 1742803370254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,9 @@\n import React, { useEffect, useState } from \"react\";\r\n-import { View, Text, Image, ImageBackground, StyleSheet, Dimensions, TouchableOpacity, Alert } from \"react-native\";\r\n+import { \r\n+    View, Text, Image, ImageBackground, StyleSheet, \r\n+    Dimensions, TouchableOpacity, Alert \r\n+} from \"react-native\";\r\n import * as Location from \"expo-location\";\r\n import { useRouter } from \"expo-router\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n@@ -8,57 +11,64 @@\n export default function EL() {\r\n     const router = useRouter();\r\n     const [isLocationEnabled, setIsLocationEnabled] = useState(false);\r\n \r\n-    // Function to check if location is already enabled\r\n+    // Check and request location permission\r\n     const checkLocationPermission = async () => {\r\n-      const { status } = await Location.getForegroundPermissionsAsync();\r\n-      const isEnabled = await Location.hasServicesEnabledAsync();\r\n-  \r\n-      if (status === \"granted\" && isEnabled) {\r\n-        setIsLocationEnabled(true);\r\n-        \r\n-        // Show alert and redirect after 2 seconds\r\n-        Alert.alert(\"Location Already Enabled\", \"Proceed to Login...\", [\r\n-          { text: \"OK\", onPress: () => router.push(\"/welcome\") } \r\n-        ]);\r\n-      }\r\n+        const { status, canAskAgain } = await Location.getForegroundPermissionsAsync();\r\n+        const isEnabled = await Location.hasServicesEnabledAsync();\r\n+\r\n+        if (status === \"granted\" && isEnabled) {\r\n+            setIsLocationEnabled(true);\r\n+            Alert.alert(\"Location Already Enabled\", \"Proceeding to Login...\", [\r\n+                { text: \"OK\", onPress: () => router.push(\"/welcome\") } \r\n+            ]);\r\n+        } else if (status !== \"granted\" && canAskAgain) {\r\n+            // If permission can be asked again, request it\r\n+            requestLocationPermission();\r\n+        } else {\r\n+            // If permission was permanently denied, prompt user to open settings\r\n+            Alert.alert(\r\n+                \"Location Access Denied\",\r\n+                \"You have permanently denied location access. Please enable it in settings.\",\r\n+                [\r\n+                    { text: \"Open Settings\", onPress: () => Location.openSettings() },\r\n+                    { text: \"Cancel\", style: \"cancel\" }\r\n+                ]\r\n+            );\r\n+        }\r\n     };\r\n-    \r\n \r\n-    // Function to request location permissions\r\n+    // Request location permission\r\n     const requestLocationPermission = async () => {\r\n         const { status } = await Location.requestForegroundPermissionsAsync();\r\n+        \r\n         if (status !== \"granted\") {\r\n-            Alert.alert(\r\n-                \"Location Access Denied\",\r\n-                \"Please enable location services in your settings.\",\r\n-                [{ text: \"OK\" }]\r\n-            );\r\n+            Alert.alert(\"Location Access Denied\", \"Please enable location services in your settings.\", [\r\n+                { text: \"OK\" }\r\n+            ]);\r\n             return;\r\n         }\r\n \r\n         // Get user's location\r\n         const location = await Location.getCurrentPositionAsync({});\r\n         console.log(\"User's location:\", location);\r\n \r\n-        // Show success alert and wait 2 seconds before navigating\r\n+        // Show success alert and navigate\r\n         Alert.alert(\"Location Enabled\", \"Your location has been accessed successfully.\", [\r\n-          { text: \"OK\", onPress: () => router.push(\"/welcome\") } \r\n+            { text: \"OK\", onPress: () => router.push(\"/welcome\") } \r\n         ]);\r\n     };\r\n \r\n-    // Check location status on mount\r\n+    // Check location permission on mount\r\n     useEffect(() => {\r\n         checkLocationPermission();\r\n     }, []);\r\n \r\n     return (\r\n         <View style={styles.container}>\r\n             <ImageBackground source={require(\"../assets/images/loc2.png\")} style={styles.background}>\r\n-                {/* Dark overlay */}\r\n                 <View style={styles.overlay} />\r\n-                {/* Centered Container */}\r\n                 <View style={styles.content}>\r\n                     <View>\r\n                         <Image style={styles.loc} source={require(\"../assets/images/loc.png\")} />\r\n                     </View>\r\n@@ -78,71 +88,71 @@\n     );\r\n }\r\n \r\n const styles = StyleSheet.create({\r\n-  container: {\r\n-    flex: 1,\r\n-    marginTop: 40,\r\n-  },\r\n-  background: {\r\n-    width: width,\r\n-    height: height,\r\n-    justifyContent: \"center\",\r\n-    alignItems: \"center\",\r\n-  },\r\n-  overlay: {\r\n-    ...StyleSheet.absoluteFillObject,\r\n-    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n-  },\r\n-  content: {\r\n-    width: width - 50,\r\n-    backgroundColor: \"white\",\r\n-    justifyContent: \"center\",\r\n-    alignItems: \"center\",\r\n-    borderRadius: 10,\r\n-    zIndex: 1,\r\n-  },\r\n-  loc: {\r\n-    margin: 50,\r\n-    height: 180,\r\n-    width: 180,\r\n-  },\r\n-  title: {\r\n-    fontSize: 27,\r\n-    fontWeight: \"800\",\r\n-    color: \"#414141\",\r\n-    textAlign: \"center\",\r\n-    fontFamily: \"Poppins-SemiBold\",\r\n-  },\r\n-  subtitle: {\r\n-    fontSize: 16,\r\n-    fontWeight: \"400\",\r\n-    color: \"#A0A0A0\",\r\n-    textAlign: \"center\",\r\n-    marginTop: 10,\r\n-    marginHorizontal: 30,\r\n-    fontFamily: \"Poppins-Regular\",\r\n-  },\r\n-  button: {\r\n-    width: \"90%\",\r\n-    margin: 30,\r\n-  },\r\n-  btntext: {\r\n-    textAlign: \"center\",\r\n-    color: \"#FFFFFF\",\r\n-    backgroundColor: \"#5089A3\",\r\n-    borderRadius: 10,\r\n-    fontSize: 20,\r\n-    padding: 20,\r\n-    fontWeight: \"600\",\r\n-    fontFamily: \"Poppins-SemiBold\",\r\n-  },\r\n-  btntext2: {\r\n-    textAlign: \"center\",\r\n-    color: \"#B8B8B8\",\r\n-    borderRadius: 10,\r\n-    fontSize: 20,\r\n-    padding: 20,\r\n-    fontWeight: \"600\",\r\n-    fontFamily: \"Poppins-SemiBold\",\r\n-  },\r\n+    container: {\r\n+        flex: 1,\r\n+        marginTop: 40,\r\n+    },\r\n+    background: {\r\n+        width: width,\r\n+        height: height,\r\n+        justifyContent: \"center\",\r\n+        alignItems: \"center\",\r\n+    },\r\n+    overlay: {\r\n+        ...StyleSheet.absoluteFillObject,\r\n+        backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n+    },\r\n+    content: {\r\n+        width: width - 50,\r\n+        backgroundColor: \"white\",\r\n+        justifyContent: \"center\",\r\n+        alignItems: \"center\",\r\n+        borderRadius: 10,\r\n+        zIndex: 1,\r\n+    },\r\n+    loc: {\r\n+        margin: 50,\r\n+        height: 180,\r\n+        width: 180,\r\n+    },\r\n+    title: {\r\n+        fontSize: 27,\r\n+        fontWeight: \"800\",\r\n+        color: \"#414141\",\r\n+        textAlign: \"center\",\r\n+        fontFamily: \"Poppins-SemiBold\",\r\n+    },\r\n+    subtitle: {\r\n+        fontSize: 16,\r\n+        fontWeight: \"400\",\r\n+        color: \"#A0A0A0\",\r\n+        textAlign: \"center\",\r\n+        marginTop: 10,\r\n+        marginHorizontal: 30,\r\n+        fontFamily: \"Poppins-Regular\",\r\n+    },\r\n+    button: {\r\n+        width: \"90%\",\r\n+        margin: 30,\r\n+    },\r\n+    btntext: {\r\n+        textAlign: \"center\",\r\n+        color: \"#FFFFFF\",\r\n+        backgroundColor: \"#5089A3\",\r\n+        borderRadius: 10,\r\n+        fontSize: 20,\r\n+        padding: 20,\r\n+        fontWeight: \"600\",\r\n+        fontFamily: \"Poppins-SemiBold\",\r\n+    },\r\n+    btntext2: {\r\n+        textAlign: \"center\",\r\n+        color: \"#B8B8B8\",\r\n+        borderRadius: 10,\r\n+        fontSize: 20,\r\n+        padding: 20,\r\n+        fontWeight: \"600\",\r\n+        fontFamily: \"Poppins-SemiBold\",\r\n+    },\r\n });\r\n"
                },
                {
                    "date": 1742803474824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React, { useEffect, useState } from \"react\";\r\n import { \r\n     View, Text, Image, ImageBackground, StyleSheet, \r\n-    Dimensions, TouchableOpacity, Alert \r\n+    Dimensions, TouchableOpacity, Alert, Linking\r\n } from \"react-native\";\r\n import * as Location from \"expo-location\";\r\n import { useRouter } from \"expo-router\";\r\n \r\n@@ -30,9 +30,9 @@\n             Alert.alert(\r\n                 \"Location Access Denied\",\r\n                 \"You have permanently denied location access. Please enable it in settings.\",\r\n                 [\r\n-                    { text: \"Open Settings\", onPress: () => Location.openSettings() },\r\n+                    { text: \"Open Settings\", onPress: () => Linking.openSettings(); },\r\n                     { text: \"Cancel\", style: \"cancel\" }\r\n                 ]\r\n             );\r\n         }\r\n"
                },
                {
                    "date": 1742803484096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n             Alert.alert(\r\n                 \"Location Access Denied\",\r\n                 \"You have permanently denied location access. Please enable it in settings.\",\r\n                 [\r\n-                    { text: \"Open Settings\", onPress: () => Linking.openSettings(); },\r\n+                    { text: \"Open Settings\", onPress: () => Linking.openSettings() },\r\n                     { text: \"Cancel\", style: \"cancel\" }\r\n                 ]\r\n             );\r\n         }\r\n"
                },
                {
                    "date": 1742803678906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,53 +11,48 @@\n export default function EL() {\r\n     const router = useRouter();\r\n     const [isLocationEnabled, setIsLocationEnabled] = useState(false);\r\n \r\n-    // Check and request location permission\r\n+    // Check location permission\r\n     const checkLocationPermission = async () => {\r\n-        const { status, canAskAgain } = await Location.getForegroundPermissionsAsync();\r\n+        const { status } = await Location.getForegroundPermissionsAsync();\r\n         const isEnabled = await Location.hasServicesEnabledAsync();\r\n \r\n         if (status === \"granted\" && isEnabled) {\r\n             setIsLocationEnabled(true);\r\n             Alert.alert(\"Location Already Enabled\", \"Proceeding to Login...\", [\r\n                 { text: \"OK\", onPress: () => router.push(\"/welcome\") } \r\n             ]);\r\n-        } else if (status !== \"granted\" && canAskAgain) {\r\n-            // If permission can be asked again, request it\r\n-            requestLocationPermission();\r\n-        } else {\r\n-            // If permission was permanently denied, prompt user to open settings\r\n+        }\r\n+    };\r\n+\r\n+    // Request location permission (Shows system dialog)\r\n+    const requestLocationPermission = async () => {\r\n+        const { status } = await Location.requestForegroundPermissionsAsync();\r\n+        \r\n+        if (status === \"granted\") {\r\n+            // Show success alert\r\n+            Alert.alert(\"Location Enabled\", \"Your location has been accessed successfully.\", [\r\n+                { text: \"OK\", onPress: () => router.push(\"/welcome\") } \r\n+            ]);\r\n+        } else if (status === \"denied\") {\r\n             Alert.alert(\r\n-                \"Location Access Denied\",\r\n-                \"You have permanently denied location access. Please enable it in settings.\",\r\n+                \"Location Permission Denied\",\r\n+                \"Please enable location access in your settings.\",\r\n                 [\r\n                     { text: \"Open Settings\", onPress: () => Linking.openSettings() },\r\n                     { text: \"Cancel\", style: \"cancel\" }\r\n                 ]\r\n             );\r\n         }\r\n     };\r\n \r\n-    // Request location permission\r\n-    const requestLocationPermission = async () => {\r\n-        const { status } = await Location.requestForegroundPermissionsAsync();\r\n-        \r\n+    // Request background location (optional)\r\n+    const requestBackgroundPermission = async () => {\r\n+        const { status } = await Location.requestBackgroundPermissionsAsync();\r\n         if (status !== \"granted\") {\r\n-            Alert.alert(\"Location Access Denied\", \"Please enable location services in your settings.\", [\r\n-                { text: \"OK\" }\r\n-            ]);\r\n-            return;\r\n+            Alert.alert(\"Background Location Denied\", \"Some features may not work properly.\");\r\n         }\r\n-\r\n-        // Get user's location\r\n-        const location = await Location.getCurrentPositionAsync({});\r\n-        console.log(\"User's location:\", location);\r\n-\r\n-        // Show success alert and navigate\r\n-        Alert.alert(\"Location Enabled\", \"Your location has been accessed successfully.\", [\r\n-            { text: \"OK\", onPress: () => router.push(\"/welcome\") } \r\n-        ]);\r\n     };\r\n \r\n     // Check location permission on mount\r\n     useEffect(() => {\r\n"
                },
                {
                    "date": 1742803985234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,20 @@\n import React, { useEffect, useState } from \"react\";\r\n import { \r\n     View, Text, Image, ImageBackground, StyleSheet, \r\n-    Dimensions, TouchableOpacity, Alert, Linking\r\n+    Dimensions, TouchableOpacity, Alert, Linking \r\n } from \"react-native\";\r\n import * as Location from \"expo-location\";\r\n import { useRouter } from \"expo-router\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n \r\n export default function EL() {\r\n     const router = useRouter();\r\n+    const [location, setLocation] = useState(null);\r\n     const [isLocationEnabled, setIsLocationEnabled] = useState(false);\r\n \r\n-    // Check location permission\r\n+    // Function to check location services and permissions\r\n     const checkLocationPermission = async () => {\r\n         const { status } = await Location.getForegroundPermissionsAsync();\r\n         const isEnabled = await Location.hasServicesEnabledAsync();\r\n \r\n@@ -24,17 +25,20 @@\n             ]);\r\n         }\r\n     };\r\n \r\n-    // Request location permission (Shows system dialog)\r\n+    // Request location permission and get the user's current location\r\n     const requestLocationPermission = async () => {\r\n         const { status } = await Location.requestForegroundPermissionsAsync();\r\n         \r\n         if (status === \"granted\") {\r\n-            // Show success alert\r\n-            Alert.alert(\"Location Enabled\", \"Your location has been accessed successfully.\", [\r\n-                { text: \"OK\", onPress: () => router.push(\"/welcome\") } \r\n-            ]);\r\n+            const userLocation = await Location.getCurrentPositionAsync({});\r\n+            setLocation(userLocation);\r\n+            Alert.alert(\r\n+                \"Location Enabled\",\r\n+                `Your location: \\nLatitude: ${userLocation.coords.latitude} \\nLongitude: ${userLocation.coords.longitude}`,\r\n+                [{ text: \"OK\", onPress: () => router.push(\"/welcome\") }]\r\n+            );\r\n         } else if (status === \"denied\") {\r\n             Alert.alert(\r\n                 \"Location Permission Denied\",\r\n                 \"Please enable location access in your settings.\",\r\n@@ -45,17 +49,17 @@\n             );\r\n         }\r\n     };\r\n \r\n-    // Request background location (optional)\r\n+    // Request background location permission (optional)\r\n     const requestBackgroundPermission = async () => {\r\n         const { status } = await Location.requestBackgroundPermissionsAsync();\r\n         if (status !== \"granted\") {\r\n             Alert.alert(\"Background Location Denied\", \"Some features may not work properly.\");\r\n         }\r\n     };\r\n \r\n-    // Check location permission on mount\r\n+    // Check permission when the component loads\r\n     useEffect(() => {\r\n         checkLocationPermission();\r\n     }, []);\r\n \r\n@@ -63,11 +67,9 @@\n         <View style={styles.container}>\r\n             <ImageBackground source={require(\"../assets/images/loc2.png\")} style={styles.background}>\r\n                 <View style={styles.overlay} />\r\n                 <View style={styles.content}>\r\n-                    <View>\r\n-                        <Image style={styles.loc} source={require(\"../assets/images/loc.png\")} />\r\n-                    </View>\r\n+                    <Image style={styles.loc} source={require(\"../assets/images/loc.png\")} />\r\n                     <Text style={styles.title}>Enable your location</Text>\r\n                     <Text style={styles.subtitle}>\r\n                         Choose your location to start finding requests around you.\r\n                     </Text>\r\n"
                },
                {
                    "date": 1742804046135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,158 @@\n+import React, { useEffect, useState } from \"react\";\r\n+import { \r\n+    View, Text, Image, ImageBackground, StyleSheet, \r\n+    Dimensions, TouchableOpacity, Alert, Linking\r\n+} from \"react-native\";\r\n+import * as Location from \"expo-location\";\r\n+import { useRouter } from \"expo-router\";\r\n+\r\n+const { width, height } = Dimensions.get(\"window\");\r\n+\r\n+export default function EL() {\r\n+    const router = useRouter();\r\n+    const [isLocationEnabled, setIsLocationEnabled] = useState(false);\r\n+\r\n+    // Check and request location permission\r\n+    const checkLocationPermission = async () => {\r\n+        const { status, canAskAgain } = await Location.getForegroundPermissionsAsync();\r\n+        const isEnabled = await Location.hasServicesEnabledAsync();\r\n+\r\n+        if (status === \"granted\" && isEnabled) {\r\n+            setIsLocationEnabled(true);\r\n+            Alert.alert(\"Location Already Enabled\", \"Proceeding to Login...\", [\r\n+                { text: \"OK\", onPress: () => router.push(\"/welcome\") } \r\n+            ]);\r\n+        } else if (status !== \"granted\" && canAskAgain) {\r\n+            // If permission can be asked again, request it\r\n+            requestLocationPermission();\r\n+        } else {\r\n+            // If permission was permanently denied, prompt user to open settings\r\n+            Alert.alert(\r\n+                \"Location Access Denied\",\r\n+                \"You have permanently denied location access. Please enable it in settings.\",\r\n+                [\r\n+                    { text: \"Open Settings\", onPress: () => Linking.openSettings(); },\r\n+                    { text: \"Cancel\", style: \"cancel\" }\r\n+                ]\r\n+            );\r\n+        }\r\n+    };\r\n+\r\n+    // Request location permission\r\n+    const requestLocationPermission = async () => {\r\n+        const { status } = await Location.requestForegroundPermissionsAsync();\r\n+        \r\n+        if (status !== \"granted\") {\r\n+            Alert.alert(\"Location Access Denied\", \"Please enable location services in your settings.\", [\r\n+                { text: \"OK\" }\r\n+            ]);\r\n+            return;\r\n+        }\r\n+\r\n+        // Get user's location\r\n+        const location = await Location.getCurrentPositionAsync({});\r\n+        console.log(\"User's location:\", location);\r\n+\r\n+        // Show success alert and navigate\r\n+        Alert.alert(\"Location Enabled\", \"Your location has been accessed successfully.\", [\r\n+            { text: \"OK\", onPress: () => router.push(\"/welcome\") } \r\n+        ]);\r\n+    };\r\n+\r\n+    // Check location permission on mount\r\n+    useEffect(() => {\r\n+        checkLocationPermission();\r\n+    }, []);\r\n+\r\n+    return (\r\n+        <View style={styles.container}>\r\n+            <ImageBackground source={require(\"../assets/images/loc2.png\")} style={styles.background}>\r\n+                <View style={styles.overlay} />\r\n+                <View style={styles.content}>\r\n+                    <View>\r\n+                        <Image style={styles.loc} source={require(\"../assets/images/loc.png\")} />\r\n+                    </View>\r\n+                    <Text style={styles.title}>Enable your location</Text>\r\n+                    <Text style={styles.subtitle}>\r\n+                        Choose your location to start finding requests around you.\r\n+                    </Text>\r\n+                    <TouchableOpacity style={styles.button} onPress={requestLocationPermission}>\r\n+                        <Text style={styles.btntext}>Use my location</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity style={{ marginBottom: 40 }}>\r\n+                        <Text style={styles.btntext2}>Skip for now</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </ImageBackground>\r\n+        </View>\r\n+    );\r\n+}\r\n+\r\n+const styles = StyleSheet.create({\r\n+    container: {\r\n+        flex: 1,\r\n+        marginTop: 40,\r\n+    },\r\n+    background: {\r\n+        width: width,\r\n+        height: height,\r\n+        justifyContent: \"center\",\r\n+        alignItems: \"center\",\r\n+    },\r\n+    overlay: {\r\n+        ...StyleSheet.absoluteFillObject,\r\n+        backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n+    },\r\n+    content: {\r\n+        width: width - 50,\r\n+        backgroundColor: \"white\",\r\n+        justifyContent: \"center\",\r\n+        alignItems: \"center\",\r\n+        borderRadius: 10,\r\n+        zIndex: 1,\r\n+    },\r\n+    loc: {\r\n+        margin: 50,\r\n+        height: 180,\r\n+        width: 180,\r\n+    },\r\n+    title: {\r\n+        fontSize: 27,\r\n+        fontWeight: \"800\",\r\n+        color: \"#414141\",\r\n+        textAlign: \"center\",\r\n+        fontFamily: \"Poppins-SemiBold\",\r\n+    },\r\n+    subtitle: {\r\n+        fontSize: 16,\r\n+        fontWeight: \"400\",\r\n+        color: \"#A0A0A0\",\r\n+        textAlign: \"center\",\r\n+        marginTop: 10,\r\n+        marginHorizontal: 30,\r\n+        fontFamily: \"Poppins-Regular\",\r\n+    },\r\n+    button: {\r\n+        width: \"90%\",\r\n+        margin: 30,\r\n+    },\r\n+    btntext: {\r\n+        textAlign: \"center\",\r\n+        color: \"#FFFFFF\",\r\n+        backgroundColor: \"#5089A3\",\r\n+        borderRadius: 10,\r\n+        fontSize: 20,\r\n+        padding: 20,\r\n+        fontWeight: \"600\",\r\n+        fontFamily: \"Poppins-SemiBold\",\r\n+    },\r\n+    btntext2: {\r\n+        textAlign: \"center\",\r\n+        color: \"#B8B8B8\",\r\n+        borderRadius: 10,\r\n+        fontSize: 20,\r\n+        padding: 20,\r\n+        fontWeight: \"600\",\r\n+        fontFamily: \"Poppins-SemiBold\",\r\n+    },\r\n+});\r\n"
                },
                {
                    "date": 1742804054205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n             Alert.alert(\r\n                 \"Location Access Denied\",\r\n                 \"You have permanently denied location access. Please enable it in settings.\",\r\n                 [\r\n-                    { text: \"Open Settings\", onPress: () => Linking.openSettings(); },\r\n+                    { text: \"Open Settings\", onPress: () => Linking.openSettings() },\r\n                     { text: \"Cancel\", style: \"cancel\" }\r\n                 ]\r\n             );\r\n         }\r\n@@ -155,159 +155,4 @@\n         fontWeight: \"600\",\r\n         fontFamily: \"Poppins-SemiBold\",\r\n     },\r\n });\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { \r\n-    View, Text, Image, ImageBackground, StyleSheet, \r\n-    Dimensions, TouchableOpacity, Alert, Linking \r\n-} from \"react-native\";\r\n-import * as Location from \"expo-location\";\r\n-import { useRouter } from \"expo-router\";\r\n-\r\n-const { width, height } = Dimensions.get(\"window\");\r\n-\r\n-export default function EL() {\r\n-    const router = useRouter();\r\n-    const [location, setLocation] = useState(null);\r\n-    const [isLocationEnabled, setIsLocationEnabled] = useState(false);\r\n-\r\n-    // Function to check location services and permissions\r\n-    const checkLocationPermission = async () => {\r\n-        const { status } = await Location.getForegroundPermissionsAsync();\r\n-        const isEnabled = await Location.hasServicesEnabledAsync();\r\n-\r\n-        if (status === \"granted\" && isEnabled) {\r\n-            setIsLocationEnabled(true);\r\n-            Alert.alert(\"Location Already Enabled\", \"Proceeding to Login...\", [\r\n-                { text: \"OK\", onPress: () => router.push(\"/welcome\") } \r\n-            ]);\r\n-        }\r\n-    };\r\n-\r\n-    // Request location permission and get the user's current location\r\n-    const requestLocationPermission = async () => {\r\n-        const { status } = await Location.requestForegroundPermissionsAsync();\r\n-        \r\n-        if (status === \"granted\") {\r\n-            const userLocation = await Location.getCurrentPositionAsync({});\r\n-            setLocation(userLocation);\r\n-            Alert.alert(\r\n-                \"Location Enabled\",\r\n-                `Your location: \\nLatitude: ${userLocation.coords.latitude} \\nLongitude: ${userLocation.coords.longitude}`,\r\n-                [{ text: \"OK\", onPress: () => router.push(\"/welcome\") }]\r\n-            );\r\n-        } else if (status === \"denied\") {\r\n-            Alert.alert(\r\n-                \"Location Permission Denied\",\r\n-                \"Please enable location access in your settings.\",\r\n-                [\r\n-                    { text: \"Open Settings\", onPress: () => Linking.openSettings() },\r\n-                    { text: \"Cancel\", style: \"cancel\" }\r\n-                ]\r\n-            );\r\n-        }\r\n-    };\r\n-\r\n-    // Request background location permission (optional)\r\n-    const requestBackgroundPermission = async () => {\r\n-        const { status } = await Location.requestBackgroundPermissionsAsync();\r\n-        if (status !== \"granted\") {\r\n-            Alert.alert(\"Background Location Denied\", \"Some features may not work properly.\");\r\n-        }\r\n-    };\r\n-\r\n-    // Check permission when the component loads\r\n-    useEffect(() => {\r\n-        checkLocationPermission();\r\n-    }, []);\r\n-\r\n-    return (\r\n-        <View style={styles.container}>\r\n-            <ImageBackground source={require(\"../assets/images/loc2.png\")} style={styles.background}>\r\n-                <View style={styles.overlay} />\r\n-                <View style={styles.content}>\r\n-                    <Image style={styles.loc} source={require(\"../assets/images/loc.png\")} />\r\n-                    <Text style={styles.title}>Enable your location</Text>\r\n-                    <Text style={styles.subtitle}>\r\n-                        Choose your location to start finding requests around you.\r\n-                    </Text>\r\n-                    <TouchableOpacity style={styles.button} onPress={requestLocationPermission}>\r\n-                        <Text style={styles.btntext}>Use my location</Text>\r\n-                    </TouchableOpacity>\r\n-                    <TouchableOpacity style={{ marginBottom: 40 }}>\r\n-                        <Text style={styles.btntext2}>Skip for now</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-            </ImageBackground>\r\n-        </View>\r\n-    );\r\n-}\r\n-\r\n-const styles = StyleSheet.create({\r\n-    container: {\r\n-        flex: 1,\r\n-        marginTop: 40,\r\n-    },\r\n-    background: {\r\n-        width: width,\r\n-        height: height,\r\n-        justifyContent: \"center\",\r\n-        alignItems: \"center\",\r\n-    },\r\n-    overlay: {\r\n-        ...StyleSheet.absoluteFillObject,\r\n-        backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n-    },\r\n-    content: {\r\n-        width: width - 50,\r\n-        backgroundColor: \"white\",\r\n-        justifyContent: \"center\",\r\n-        alignItems: \"center\",\r\n-        borderRadius: 10,\r\n-        zIndex: 1,\r\n-    },\r\n-    loc: {\r\n-        margin: 50,\r\n-        height: 180,\r\n-        width: 180,\r\n-    },\r\n-    title: {\r\n-        fontSize: 27,\r\n-        fontWeight: \"800\",\r\n-        color: \"#414141\",\r\n-        textAlign: \"center\",\r\n-        fontFamily: \"Poppins-SemiBold\",\r\n-    },\r\n-    subtitle: {\r\n-        fontSize: 16,\r\n-        fontWeight: \"400\",\r\n-        color: \"#A0A0A0\",\r\n-        textAlign: \"center\",\r\n-        marginTop: 10,\r\n-        marginHorizontal: 30,\r\n-        fontFamily: \"Poppins-Regular\",\r\n-    },\r\n-    button: {\r\n-        width: \"90%\",\r\n-        margin: 30,\r\n-    },\r\n-    btntext: {\r\n-        textAlign: \"center\",\r\n-        color: \"#FFFFFF\",\r\n-        backgroundColor: \"#5089A3\",\r\n-        borderRadius: 10,\r\n-        fontSize: 20,\r\n-        padding: 20,\r\n-        fontWeight: \"600\",\r\n-        fontFamily: \"Poppins-SemiBold\",\r\n-    },\r\n-    btntext2: {\r\n-        textAlign: \"center\",\r\n-        color: \"#B8B8B8\",\r\n-        borderRadius: 10,\r\n-        fontSize: 20,\r\n-        padding: 20,\r\n-        fontWeight: \"600\",\r\n-        fontFamily: \"Poppins-SemiBold\",\r\n-    },\r\n-});\r\n"
                },
                {
                    "date": 1742804164266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React, { useEffect, useState } from \"react\";\r\n import { \r\n     View, Text, Image, ImageBackground, StyleSheet, \r\n-    Dimensions, TouchableOpacity, Alert, Linking\r\n+    Dimensions, TouchableOpacity, Alert, Linking \r\n } from \"react-native\";\r\n import * as Location from \"expo-location\";\r\n import { useRouter } from \"expo-router\";\r\n \r\n@@ -12,72 +12,56 @@\n     const router = useRouter();\r\n     const [isLocationEnabled, setIsLocationEnabled] = useState(false);\r\n \r\n     // Check and request location permission\r\n-    const checkLocationPermission = async () => {\r\n-        const { status, canAskAgain } = await Location.getForegroundPermissionsAsync();\r\n-        const isEnabled = await Location.hasServicesEnabledAsync();\r\n+    const checkAndRequestLocation = async () => {\r\n+        // Check if location services (GPS) are enabled\r\n+        const isGpsEnabled = await Location.hasServicesEnabledAsync();\r\n+        if (!isGpsEnabled) {\r\n+            Alert.alert(\r\n+                \"GPS is Off\",\r\n+                \"Please turn on location services in your settings.\",\r\n+                [{ text: \"OK\" }]\r\n+            );\r\n+            return;\r\n+        }\r\n \r\n-        if (status === \"granted\" && isEnabled) {\r\n+        // Request foreground location permission\r\n+        const { status } = await Location.requestForegroundPermissionsAsync();\r\n+\r\n+        if (status === \"granted\") {\r\n             setIsLocationEnabled(true);\r\n-            Alert.alert(\"Location Already Enabled\", \"Proceeding to Login...\", [\r\n-                { text: \"OK\", onPress: () => router.push(\"/welcome\") } \r\n+            Alert.alert(\"Location Enabled\", \"Your location has been accessed successfully.\", [\r\n+                { text: \"OK\", onPress: () => router.push(\"/welcome\") }\r\n             ]);\r\n-        } else if (status !== \"granted\" && canAskAgain) {\r\n-            // If permission can be asked again, request it\r\n-            requestLocationPermission();\r\n-        } else {\r\n-            // If permission was permanently denied, prompt user to open settings\r\n+        } else if (status === \"denied\") {\r\n             Alert.alert(\r\n-                \"Location Access Denied\",\r\n-                \"You have permanently denied location access. Please enable it in settings.\",\r\n+                \"Location Permission Denied\",\r\n+                \"Enable location access in your settings.\",\r\n                 [\r\n                     { text: \"Open Settings\", onPress: () => Linking.openSettings() },\r\n                     { text: \"Cancel\", style: \"cancel\" }\r\n                 ]\r\n             );\r\n         }\r\n     };\r\n \r\n-    // Request location permission\r\n-    const requestLocationPermission = async () => {\r\n-        const { status } = await Location.requestForegroundPermissionsAsync();\r\n-        \r\n-        if (status !== \"granted\") {\r\n-            Alert.alert(\"Location Access Denied\", \"Please enable location services in your settings.\", [\r\n-                { text: \"OK\" }\r\n-            ]);\r\n-            return;\r\n-        }\r\n-\r\n-        // Get user's location\r\n-        const location = await Location.getCurrentPositionAsync({});\r\n-        console.log(\"User's location:\", location);\r\n-\r\n-        // Show success alert and navigate\r\n-        Alert.alert(\"Location Enabled\", \"Your location has been accessed successfully.\", [\r\n-            { text: \"OK\", onPress: () => router.push(\"/welcome\") } \r\n-        ]);\r\n-    };\r\n-\r\n-    // Check location permission on mount\r\n+    // Check location permissions on screen load\r\n     useEffect(() => {\r\n-        checkLocationPermission();\r\n+        checkAndRequestLocation();\r\n     }, []);\r\n \r\n     return (\r\n         <View style={styles.container}>\r\n             <ImageBackground source={require(\"../assets/images/loc2.png\")} style={styles.background}>\r\n                 <View style={styles.overlay} />\r\n                 <View style={styles.content}>\r\n-                    <View>\r\n-                        <Image style={styles.loc} source={require(\"../assets/images/loc.png\")} />\r\n-                    </View>\r\n+                    <Image style={styles.loc} source={require(\"../assets/images/loc.png\")} />\r\n                     <Text style={styles.title}>Enable your location</Text>\r\n                     <Text style={styles.subtitle}>\r\n                         Choose your location to start finding requests around you.\r\n                     </Text>\r\n-                    <TouchableOpacity style={styles.button} onPress={requestLocationPermission}>\r\n+                    <TouchableOpacity style={styles.button} onPress={checkAndRequestLocation}>\r\n                         <Text style={styles.btntext}>Use my location</Text>\r\n                     </TouchableOpacity>\r\n                     <TouchableOpacity style={{ marginBottom: 40 }}>\r\n                         <Text style={styles.btntext2}>Skip for now</Text>\r\n"
                },
                {
                    "date": 1742804377223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,44 +11,44 @@\n export default function EL() {\r\n     const router = useRouter();\r\n     const [isLocationEnabled, setIsLocationEnabled] = useState(false);\r\n \r\n-    // Check and request location permission\r\n-    const checkAndRequestLocation = async () => {\r\n-        // Check if location services (GPS) are enabled\r\n-        const isGpsEnabled = await Location.hasServicesEnabledAsync();\r\n-        if (!isGpsEnabled) {\r\n-            Alert.alert(\r\n-                \"GPS is Off\",\r\n-                \"Please turn on location services in your settings.\",\r\n-                [{ text: \"OK\" }]\r\n-            );\r\n-            return;\r\n-        }\r\n+    // Function to request location permission (Triggers system dialog)\r\n+    const requestLocationPermission = async () => {\r\n+        try {\r\n+            const { status } = await Location.requestForegroundPermissionsAsync();\r\n \r\n-        // Request foreground location permission\r\n-        const { status } = await Location.requestForegroundPermissionsAsync();\r\n-\r\n-        if (status === \"granted\") {\r\n-            setIsLocationEnabled(true);\r\n-            Alert.alert(\"Location Enabled\", \"Your location has been accessed successfully.\", [\r\n-                { text: \"OK\", onPress: () => router.push(\"/welcome\") }\r\n-            ]);\r\n-        } else if (status === \"denied\") {\r\n-            Alert.alert(\r\n-                \"Location Permission Denied\",\r\n-                \"Enable location access in your settings.\",\r\n-                [\r\n-                    { text: \"Open Settings\", onPress: () => Linking.openSettings() },\r\n-                    { text: \"Cancel\", style: \"cancel\" }\r\n-                ]\r\n-            );\r\n+            if (status === \"granted\") {\r\n+                setIsLocationEnabled(true);\r\n+                Alert.alert(\"Location Enabled\", \"Your location has been accessed successfully.\", [\r\n+                    { text: \"OK\", onPress: () => router.push(\"/welcome\") }\r\n+                ]);\r\n+            } else if (status === \"denied\") {\r\n+                Alert.alert(\r\n+                    \"Location Permission Denied\",\r\n+                    \"Please enable location access in settings.\",\r\n+                    [\r\n+                        { text: \"Open Settings\", onPress: () => Linking.openSettings() },\r\n+                        { text: \"Cancel\", style: \"cancel\" }\r\n+                    ]\r\n+                );\r\n+            }\r\n+        } catch (error) {\r\n+            console.error(\"Error requesting location permission:\", error);\r\n         }\r\n     };\r\n \r\n-    // Check location permissions on screen load\r\n+    // Check location permission & trigger request if not granted\r\n     useEffect(() => {\r\n-        checkAndRequestLocation();\r\n+        (async () => {\r\n+            const { status } = await Location.getForegroundPermissionsAsync();\r\n+            if (status !== \"granted\") {\r\n+                requestLocationPermission();\r\n+            } else {\r\n+                setIsLocationEnabled(true);\r\n+                router.push(\"/welcome\");\r\n+            }\r\n+        })();\r\n     }, []);\r\n \r\n     return (\r\n         <View style={styles.container}>\r\n@@ -59,9 +59,9 @@\n                     <Text style={styles.title}>Enable your location</Text>\r\n                     <Text style={styles.subtitle}>\r\n                         Choose your location to start finding requests around you.\r\n                     </Text>\r\n-                    <TouchableOpacity style={styles.button} onPress={checkAndRequestLocation}>\r\n+                    <TouchableOpacity style={styles.button} onPress={requestLocationPermission}>\r\n                         <Text style={styles.btntext}>Use my location</Text>\r\n                     </TouchableOpacity>\r\n                     <TouchableOpacity style={{ marginBottom: 40 }}>\r\n                         <Text style={styles.btntext2}>Skip for now</Text>\r\n"
                },
                {
                    "date": 1742804530000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React, { useEffect, useState } from \"react\";\r\n import { \r\n     View, Text, Image, ImageBackground, StyleSheet, \r\n-    Dimensions, TouchableOpacity, Alert, Linking \r\n+    Dimensions, TouchableOpacity, Alert, Linking\r\n } from \"react-native\";\r\n import * as Location from \"expo-location\";\r\n import { useRouter } from \"expo-router\";\r\n \r\n@@ -11,52 +11,68 @@\n export default function EL() {\r\n     const router = useRouter();\r\n     const [isLocationEnabled, setIsLocationEnabled] = useState(false);\r\n \r\n-    // Function to request location permission (Triggers system dialog)\r\n-    const requestLocationPermission = async () => {\r\n-        try {\r\n-            const { status } = await Location.requestForegroundPermissionsAsync();\r\n+    // Check and request location permission\r\n+    const checkLocationPermission = async () => {\r\n+        const { status, canAskAgain } = await Location.getForegroundPermissionsAsync();\r\n+        const isEnabled = await Location.hasServicesEnabledAsync();\r\n \r\n-            if (status === \"granted\") {\r\n-                setIsLocationEnabled(true);\r\n-                Alert.alert(\"Location Enabled\", \"Your location has been accessed successfully.\", [\r\n-                    { text: \"OK\", onPress: () => router.push(\"/welcome\") }\r\n-                ]);\r\n-            } else if (status === \"denied\") {\r\n-                Alert.alert(\r\n-                    \"Location Permission Denied\",\r\n-                    \"Please enable location access in settings.\",\r\n-                    [\r\n-                        { text: \"Open Settings\", onPress: () => Linking.openSettings() },\r\n-                        { text: \"Cancel\", style: \"cancel\" }\r\n-                    ]\r\n-                );\r\n-            }\r\n-        } catch (error) {\r\n-            console.error(\"Error requesting location permission:\", error);\r\n+        if (status === \"granted\" && isEnabled) {\r\n+            setIsLocationEnabled(true);\r\n+            Alert.alert(\"Location Already Enabled\", \"Proceeding to Login...\", [\r\n+                { text: \"OK\", onPress: () => router.push(\"/welcome\") } \r\n+            ]);\r\n+        } else if (status !== \"granted\" && canAskAgain) {\r\n+            // If permission can be asked again, request it\r\n+            requestLocationPermission();\r\n+        } else {\r\n+            // If permission was permanently denied, prompt user to open settings\r\n+            Alert.alert(\r\n+                \"Location Access Denied\",\r\n+                \"You have permanently denied location access. Please enable it in settings.\",\r\n+                [\r\n+                    { text: \"Open Settings\", onPress: () => Linking.openSettings() },\r\n+                    { text: \"Cancel\", style: \"cancel\" }\r\n+                ]\r\n+            );\r\n         }\r\n     };\r\n \r\n-    // Check location permission & trigger request if not granted\r\n+    // Request location permission\r\n+    const requestLocationPermission = async () => {\r\n+        const { status } = await Location.requestForegroundPermissionsAsync();\r\n+        \r\n+        if (status !== \"granted\") {\r\n+            Alert.alert(\"Location Access Denied\", \"Please enable location services in your settings.\", [\r\n+                { text: \"OK\" }\r\n+            ]);\r\n+            return;\r\n+        }\r\n+\r\n+        // Get user's location\r\n+        const location = await Location.getCurrentPositionAsync({});\r\n+        console.log(\"User's location:\", location);\r\n+\r\n+        // Show success alert and navigate\r\n+        Alert.alert(\"Location Enabled\", \"Your location has been accessed successfully.\", [\r\n+            { text: \"OK\", onPress: () => router.push(\"/welcome\") } \r\n+        ]);\r\n+    };\r\n+\r\n+    // Check location permission on mount\r\n     useEffect(() => {\r\n-        (async () => {\r\n-            const { status } = await Location.getForegroundPermissionsAsync();\r\n-            if (status !== \"granted\") {\r\n-                requestLocationPermission();\r\n-            } else {\r\n-                setIsLocationEnabled(true);\r\n-                router.push(\"/welcome\");\r\n-            }\r\n-        })();\r\n+        checkLocationPermission();\r\n     }, []);\r\n \r\n     return (\r\n         <View style={styles.container}>\r\n             <ImageBackground source={require(\"../assets/images/loc2.png\")} style={styles.background}>\r\n                 <View style={styles.overlay} />\r\n                 <View style={styles.content}>\r\n-                    <Image style={styles.loc} source={require(\"../assets/images/loc.png\")} />\r\n+                    <View>\r\n+                        <Image style={styles.loc} source={require(\"../assets/images/loc.png\")} />\r\n+                    </View>\r\n                     <Text style={styles.title}>Enable your location</Text>\r\n                     <Text style={styles.subtitle}>\r\n                         Choose your location to start finding requests around you.\r\n                     </Text>\r\n"
                },
                {
                    "date": 1742804584652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,6 @@\n import React, { useEffect, useState } from \"react\";\r\n-import { \r\n-    View, Text, Image, ImageBackground, StyleSheet, \r\n-    Dimensions, TouchableOpacity, Alert, Linking\r\n-} from \"react-native\";\r\n+import { View, Text, Image, ImageBackground, StyleSheet, Dimensions, TouchableOpacity, Alert } from \"react-native\";\r\n import * as Location from \"expo-location\";\r\n import { useRouter } from \"expo-router\";\r\n \r\n const { width, height } = Dimensions.get(\"window\");\r\n@@ -11,64 +8,56 @@\n export default function EL() {\r\n     const router = useRouter();\r\n     const [isLocationEnabled, setIsLocationEnabled] = useState(false);\r\n \r\n-    // Check and request location permission\r\n+    // Function to check if location is already enabled\r\n     const checkLocationPermission = async () => {\r\n-        const { status, canAskAgain } = await Location.getForegroundPermissionsAsync();\r\n-        const isEnabled = await Location.hasServicesEnabledAsync();\r\n-\r\n-        if (status === \"granted\" && isEnabled) {\r\n+        const { status } = await Location.getForegroundPermissionsAsync();\r\n+        if (status === \"granted\") {\r\n             setIsLocationEnabled(true);\r\n-            Alert.alert(\"Location Already Enabled\", \"Proceeding to Login...\", [\r\n-                { text: \"OK\", onPress: () => router.push(\"/welcome\") } \r\n-            ]);\r\n-        } else if (status !== \"granted\" && canAskAgain) {\r\n-            // If permission can be asked again, request it\r\n-            requestLocationPermission();\r\n-        } else {\r\n-            // If permission was permanently denied, prompt user to open settings\r\n-            Alert.alert(\r\n-                \"Location Access Denied\",\r\n-                \"You have permanently denied location access. Please enable it in settings.\",\r\n-                [\r\n-                    { text: \"Open Settings\", onPress: () => Linking.openSettings() },\r\n-                    { text: \"Cancel\", style: \"cancel\" }\r\n-                ]\r\n-            );\r\n+            \r\n+            // Show alert and wait 2 seconds before proceeding\r\n+            Alert.alert(\"Location Already Enabled\", \"You will be redirected shortly...\");\r\n+            setTimeout(() => {\r\n+                router.push(\"/welcome\");\r\n+            }, 2000); // 2-second delay\r\n         }\r\n     };\r\n \r\n-    // Request location permission\r\n+    // Function to request location permissions\r\n     const requestLocationPermission = async () => {\r\n         const { status } = await Location.requestForegroundPermissionsAsync();\r\n-        \r\n         if (status !== \"granted\") {\r\n-            Alert.alert(\"Location Access Denied\", \"Please enable location services in your settings.\", [\r\n-                { text: \"OK\" }\r\n-            ]);\r\n+            Alert.alert(\r\n+                \"Location Access Denied\",\r\n+                \"Please enable location services in your settings.\",\r\n+                [{ text: \"OK\" }]\r\n+            );\r\n             return;\r\n         }\r\n \r\n         // Get user's location\r\n         const location = await Location.getCurrentPositionAsync({});\r\n         console.log(\"User's location:\", location);\r\n \r\n-        // Show success alert and navigate\r\n-        Alert.alert(\"Location Enabled\", \"Your location has been accessed successfully.\", [\r\n-            { text: \"OK\", onPress: () => router.push(\"/welcome\") } \r\n-        ]);\r\n+        // Show success alert and wait 2 seconds before navigating\r\n+        Alert.alert(\"Location Enabled\", \"Your location has been accessed successfully.\");\r\n+        setTimeout(() => {\r\n+            router.push(\"/welcome\");\r\n+        }, 2000);\r\n     };\r\n \r\n-    // Check location permission on mount\r\n+    // Check location status on mount\r\n     useEffect(() => {\r\n         checkLocationPermission();\r\n     }, []);\r\n \r\n     return (\r\n         <View style={styles.container}>\r\n             <ImageBackground source={require(\"../assets/images/loc2.png\")} style={styles.background}>\r\n+                {/* Dark overlay */}\r\n                 <View style={styles.overlay} />\r\n+                {/* Centered Container */}\r\n                 <View style={styles.content}>\r\n                     <View>\r\n                         <Image style={styles.loc} source={require(\"../assets/images/loc.png\")} />\r\n                     </View>\r\n@@ -88,71 +77,71 @@\n     );\r\n }\r\n \r\n const styles = StyleSheet.create({\r\n-    container: {\r\n-        flex: 1,\r\n-        marginTop: 40,\r\n-    },\r\n-    background: {\r\n-        width: width,\r\n-        height: height,\r\n-        justifyContent: \"center\",\r\n-        alignItems: \"center\",\r\n-    },\r\n-    overlay: {\r\n-        ...StyleSheet.absoluteFillObject,\r\n-        backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n-    },\r\n-    content: {\r\n-        width: width - 50,\r\n-        backgroundColor: \"white\",\r\n-        justifyContent: \"center\",\r\n-        alignItems: \"center\",\r\n-        borderRadius: 10,\r\n-        zIndex: 1,\r\n-    },\r\n-    loc: {\r\n-        margin: 50,\r\n-        height: 180,\r\n-        width: 180,\r\n-    },\r\n-    title: {\r\n-        fontSize: 27,\r\n-        fontWeight: \"800\",\r\n-        color: \"#414141\",\r\n-        textAlign: \"center\",\r\n-        fontFamily: \"Poppins-SemiBold\",\r\n-    },\r\n-    subtitle: {\r\n-        fontSize: 16,\r\n-        fontWeight: \"400\",\r\n-        color: \"#A0A0A0\",\r\n-        textAlign: \"center\",\r\n-        marginTop: 10,\r\n-        marginHorizontal: 30,\r\n-        fontFamily: \"Poppins-Regular\",\r\n-    },\r\n-    button: {\r\n-        width: \"90%\",\r\n-        margin: 30,\r\n-    },\r\n-    btntext: {\r\n-        textAlign: \"center\",\r\n-        color: \"#FFFFFF\",\r\n-        backgroundColor: \"#5089A3\",\r\n-        borderRadius: 10,\r\n-        fontSize: 20,\r\n-        padding: 20,\r\n-        fontWeight: \"600\",\r\n-        fontFamily: \"Poppins-SemiBold\",\r\n-    },\r\n-    btntext2: {\r\n-        textAlign: \"center\",\r\n-        color: \"#B8B8B8\",\r\n-        borderRadius: 10,\r\n-        fontSize: 20,\r\n-        padding: 20,\r\n-        fontWeight: \"600\",\r\n-        fontFamily: \"Poppins-SemiBold\",\r\n-    },\r\n+  container: {\r\n+    flex: 1,\r\n+    marginTop: 40,\r\n+  },\r\n+  background: {\r\n+    width: width,\r\n+    height: height,\r\n+    justifyContent: \"center\",\r\n+    alignItems: \"center\",\r\n+  },\r\n+  overlay: {\r\n+    ...StyleSheet.absoluteFillObject,\r\n+    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n+  },\r\n+  content: {\r\n+    width: width - 50,\r\n+    backgroundColor: \"white\",\r\n+    justifyContent: \"center\",\r\n+    alignItems: \"center\",\r\n+    borderRadius: 10,\r\n+    zIndex: 1,\r\n+  },\r\n+  loc: {\r\n+    margin: 50,\r\n+    height: 180,\r\n+    width: 180,\r\n+  },\r\n+  title: {\r\n+    fontSize: 27,\r\n+    fontWeight: \"800\",\r\n+    color: \"#414141\",\r\n+    textAlign: \"center\",\r\n+    fontFamily: \"Poppins-SemiBold\",\r\n+  },\r\n+  subtitle: {\r\n+    fontSize: 16,\r\n+    fontWeight: \"400\",\r\n+    color: \"#A0A0A0\",\r\n+    textAlign: \"center\",\r\n+    marginTop: 10,\r\n+    marginHorizontal: 30,\r\n+    fontFamily: \"Poppins-Regular\",\r\n+  },\r\n+  button: {\r\n+    width: \"90%\",\r\n+    margin: 30,\r\n+  },\r\n+  btntext: {\r\n+    textAlign: \"center\",\r\n+    color: \"#FFFFFF\",\r\n+    backgroundColor: \"#5089A3\",\r\n+    borderRadius: 10,\r\n+    fontSize: 20,\r\n+    padding: 20,\r\n+    fontWeight: \"600\",\r\n+    fontFamily: \"Poppins-SemiBold\",\r\n+  },\r\n+  btntext2: {\r\n+    textAlign: \"center\",\r\n+    color: \"#B8B8B8\",\r\n+    borderRadius: 10,\r\n+    fontSize: 20,\r\n+    padding: 20,\r\n+    fontWeight: \"600\",\r\n+    fontFamily: \"Poppins-SemiBold\",\r\n+  },\r\n });\r\n"
                },
                {
                    "date": 1742804660998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,19 +10,20 @@\n     const [isLocationEnabled, setIsLocationEnabled] = useState(false);\r\n \r\n     // Function to check if location is already enabled\r\n     const checkLocationPermission = async () => {\r\n-        const { status } = await Location.getForegroundPermissionsAsync();\r\n-        if (status === \"granted\") {\r\n-            setIsLocationEnabled(true);\r\n-            \r\n-            // Show alert and wait 2 seconds before proceeding\r\n-            Alert.alert(\"Location Already Enabled\", \"You will be redirected shortly...\");\r\n-            setTimeout(() => {\r\n-                router.push(\"/welcome\");\r\n-            }, 2000); // 2-second delay\r\n-        }\r\n+      const { status } = await Location.getForegroundPermissionsAsync();\r\n+      const isEnabled = await Location.hasServicesEnabledAsync(); // Checks if GPS is enabled\r\n+  \r\n+      if (status === \"granted\" && isEnabled) {\r\n+        setIsLocationEnabled(true);\r\n+        \r\n+        // Show alert and redirect after 2 seconds\r\n+        Alert.alert(\"Location Already Enabled\", \"You will be redirected shortly...\");\r\n+        setTimeout(() => {router.push(\"/welcome\");}, 2000);\r\n+      }\r\n     };\r\n+    \r\n \r\n     // Function to request location permissions\r\n     const requestLocationPermission = async () => {\r\n         const { status } = await Location.requestForegroundPermissionsAsync();\r\n"
                },
                {
                    "date": 1742831337535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import React, { useEffect, useState } from \"react\";\r\n+import { View, Text, Image, ImageBackground, StyleSheet, Dimensions, TouchableOpacity, Alert } from \"react-native\";\r\n+import * as Location from \"expo-location\";\r\n+import { useRouter } from \"expo-router\";\r\n+\r\n+const { width, height } = Dimensions.get(\"window\");\r\n+\r\n+export default function EL() {\r\n+    const router = useRouter();\r\n+    const [isLocationEnabled, setIsLocationEnabled] = useState(false);\r\n+\r\n+    // Function to check if location is already enabled\r\n+    const checkLocationPermission = async () => {\r\n+      const { status } = await Location.getForegroundPermissionsAsync();\r\n+      const isEnabled = await Location.hasServicesEnabledAsync(); // Checks if GPS is enabled\r\n+  \r\n+      if (status === \"granted\" && isEnabled) {\r\n+        setIsLocationEnabled(true);\r\n+        \r\n+        // Show alert and redirect after 2 seconds\r\n+        Alert.alert(\"Location Already Enabled\", \"You will be redirected shortly...\");\r\n+        setTimeout(() => {router.push(\"/welcome\");}, 2000);\r\n+      }\r\n+    };\r\n+    \r\n+\r\n+    // Function to request location permissions\r\n+    const requestLocationPermission = async () => {\r\n+        const { status } = await Location.requestForegroundPermissionsAsync();\r\n+        if (status !== \"granted\") {\r\n+            Alert.alert(\r\n+                \"Location Access Denied\",\r\n+                \"Please enable location services in your settings.\",\r\n+                [{ text: \"OK\" }]\r\n+            );\r\n+            return;\r\n+        }\r\n+\r\n+        // Get user's location\r\n+        const location = await Location.getCurrentPositionAsync({});\r\n+        console.log(\"User's location:\", location);\r\n+\r\n+        // Show success alert and wait 2 seconds before navigating\r\n+        Alert.alert(\"Location Enabled\", \"Your location has been accessed successfully.\");\r\n+        setTimeout(() => {\r\n+            router.push(\"/welcome\");\r\n+        }, 2000);\r\n+    };\r\n+\r\n+    // Check location status on mount\r\n+    useEffect(() => {\r\n+        checkLocationPermission();\r\n+    }, []);\r\n+\r\n+    return (\r\n+        <View style={styles.container}>\r\n+            <ImageBackground source={require(\"../assets/images/loc2.png\")} style={styles.background}>\r\n+                {/* Dark overlay */}\r\n+                <View style={styles.overlay} />\r\n+                {/* Centered Container */}\r\n+                <View style={styles.content}>\r\n+                    <View>\r\n+                        <Image style={styles.loc} source={require(\"../assets/images/loc.png\")} />\r\n+                    </View>\r\n+                    <Text style={styles.title}>Enable your location</Text>\r\n+                    <Text style={styles.subtitle}>\r\n+                        Choose your location to start finding requests around you.\r\n+                    </Text>\r\n+                    <TouchableOpacity style={styles.button} onPress={requestLocationPermission}>\r\n+                        <Text style={styles.btntext}>Use my location</Text>\r\n+                    </TouchableOpacity>\r\n+                    <TouchableOpacity style={{ marginBottom: 40 }}>\r\n+                        <Text style={styles.btntext2} onPress={() => router.push(\"/manual\")}>Skip for now</Text>\r\n+                    </TouchableOpacity>\r\n+                </View>\r\n+            </ImageBackground>\r\n+        </View>\r\n+    );\r\n+}\r\n+\r\n+const styles = StyleSheet.create({\r\n+  container: {\r\n+    flex: 1,\r\n+    marginTop: 40,\r\n+  },\r\n+  background: {\r\n+    width: width,\r\n+    height: height,\r\n+    justifyContent: \"center\",\r\n+    alignItems: \"center\",\r\n+  },\r\n+  overlay: {\r\n+    ...StyleSheet.absoluteFillObject,\r\n+    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n+  },\r\n+  content: {\r\n+    width: width - 50,\r\n+    backgroundColor: \"white\",\r\n+    justifyContent: \"center\",\r\n+    alignItems: \"center\",\r\n+    borderRadius: 10,\r\n+    zIndex: 1,\r\n+  },\r\n+  loc: {\r\n+    margin: 50,\r\n+    height: 180,\r\n+    width: 180,\r\n+  },\r\n+  title: {\r\n+    fontSize: 27,\r\n+    fontWeight: \"800\",\r\n+    color: \"#414141\",\r\n+    textAlign: \"center\",\r\n+    fontFamily: \"Poppins-SemiBold\",\r\n+  },\r\n+  subtitle: {\r\n+    fontSize: 16,\r\n+    fontWeight: \"400\",\r\n+    color: \"#A0A0A0\",\r\n+    textAlign: \"center\",\r\n+    marginTop: 10,\r\n+    marginHorizontal: 30,\r\n+    fontFamily: \"Poppins-Regular\",\r\n+  },\r\n+  button: {\r\n+    width: \"90%\",\r\n+    margin: 30,\r\n+  },\r\n+  btntext: {\r\n+    textAlign: \"center\",\r\n+    color: \"#FFFFFF\",\r\n+    backgroundColor: \"#5089A3\",\r\n+    borderRadius: 10,\r\n+    fontSize: 20,\r\n+    padding: 20,\r\n+    fontWeight: \"600\",\r\n+    fontFamily: \"Poppins-SemiBold\",\r\n+  },\r\n+  btntext2: {\r\n+    textAlign: \"center\",\r\n+    color: \"#B8B8B8\",\r\n+    borderRadius: 10,\r\n+    fontSize: 20,\r\n+    padding: 20,\r\n+    fontWeight: \"600\",\r\n+    fontFamily: \"Poppins-SemiBold\",\r\n+  },\r\n+});\r\n"
                },
                {
                    "date": 1743076899886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,21 +11,17 @@\n \r\n     // Function to check if location is already enabled\r\n     const checkLocationPermission = async () => {\r\n       const { status } = await Location.getForegroundPermissionsAsync();\r\n-      const isEnabled = await Location.hasServicesEnabledAsync(); // Checks if GPS is enabled\r\n+      const isEnabled = await Location.hasServicesEnabledAsync(); \r\n   \r\n       if (status === \"granted\" && isEnabled) {\r\n         setIsLocationEnabled(true);\r\n         \r\n-        // Show alert and redirect after 2 seconds\r\n         Alert.alert(\"Location Already Enabled\", \"You will be redirected shortly...\");\r\n         setTimeout(() => {router.push(\"/welcome\");}, 2000);\r\n       }\r\n     };\r\n-    \r\n-\r\n-    // Function to request location permissions\r\n     const requestLocationPermission = async () => {\r\n         const { status } = await Location.requestForegroundPermissionsAsync();\r\n         if (status !== \"granted\") {\r\n             Alert.alert(\r\n@@ -39,16 +35,14 @@\n         // Get user's location\r\n         const location = await Location.getCurrentPositionAsync({});\r\n         console.log(\"User's location:\", location);\r\n \r\n-        // Show success alert and wait 2 seconds before navigating\r\n         Alert.alert(\"Location Enabled\", \"Your location has been accessed successfully.\");\r\n         setTimeout(() => {\r\n             router.push(\"/welcome\");\r\n         }, 2000);\r\n     };\r\n \r\n-    // Check location status on mount\r\n     useEffect(() => {\r\n         checkLocationPermission();\r\n     }, []);\r\n \r\n@@ -145,152 +139,4 @@\n     fontWeight: \"600\",\r\n     fontFamily: \"Poppins-SemiBold\",\r\n   },\r\n });\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { View, Text, Image, ImageBackground, StyleSheet, Dimensions, TouchableOpacity, Alert } from \"react-native\";\r\n-import * as Location from \"expo-location\";\r\n-import { useRouter } from \"expo-router\";\r\n-\r\n-const { width, height } = Dimensions.get(\"window\");\r\n-\r\n-export default function EL() {\r\n-    const router = useRouter();\r\n-    const [isLocationEnabled, setIsLocationEnabled] = useState(false);\r\n-\r\n-    // Function to check if location is already enabled\r\n-    const checkLocationPermission = async () => {\r\n-      const { status } = await Location.getForegroundPermissionsAsync();\r\n-      const isEnabled = await Location.hasServicesEnabledAsync(); // Checks if GPS is enabled\r\n-  \r\n-      if (status === \"granted\" && isEnabled) {\r\n-        setIsLocationEnabled(true);\r\n-        \r\n-        // Show alert and redirect after 2 seconds\r\n-        Alert.alert(\"Location Already Enabled\", \"You will be redirected shortly...\");\r\n-        setTimeout(() => {router.push(\"/welcome\");}, 2000);\r\n-      }\r\n-    };\r\n-    \r\n-\r\n-    // Function to request location permissions\r\n-    const requestLocationPermission = async () => {\r\n-        const { status } = await Location.requestForegroundPermissionsAsync();\r\n-        if (status !== \"granted\") {\r\n-            Alert.alert(\r\n-                \"Location Access Denied\",\r\n-                \"Please enable location services in your settings.\",\r\n-                [{ text: \"OK\" }]\r\n-            );\r\n-            return;\r\n-        }\r\n-\r\n-        // Get user's location\r\n-        const location = await Location.getCurrentPositionAsync({});\r\n-        console.log(\"User's location:\", location);\r\n-\r\n-        // Show success alert and wait 2 seconds before navigating\r\n-        Alert.alert(\"Location Enabled\", \"Your location has been accessed successfully.\");\r\n-        setTimeout(() => {\r\n-            router.push(\"/welcome\");\r\n-        }, 2000);\r\n-    };\r\n-\r\n-    // Check location status on mount\r\n-    useEffect(() => {\r\n-        checkLocationPermission();\r\n-    }, []);\r\n-\r\n-    return (\r\n-        <View style={styles.container}>\r\n-            <ImageBackground source={require(\"../assets/images/loc2.png\")} style={styles.background}>\r\n-                {/* Dark overlay */}\r\n-                <View style={styles.overlay} />\r\n-                {/* Centered Container */}\r\n-                <View style={styles.content}>\r\n-                    <View>\r\n-                        <Image style={styles.loc} source={require(\"../assets/images/loc.png\")} />\r\n-                    </View>\r\n-                    <Text style={styles.title}>Enable your location</Text>\r\n-                    <Text style={styles.subtitle}>\r\n-                        Choose your location to start finding requests around you.\r\n-                    </Text>\r\n-                    <TouchableOpacity style={styles.button} onPress={requestLocationPermission}>\r\n-                        <Text style={styles.btntext}>Use my location</Text>\r\n-                    </TouchableOpacity>\r\n-                    <TouchableOpacity style={{ marginBottom: 40 }}>\r\n-                        <Text style={styles.btntext2}>Skip for now</Text>\r\n-                    </TouchableOpacity>\r\n-                </View>\r\n-            </ImageBackground>\r\n-        </View>\r\n-    );\r\n-}\r\n-\r\n-const styles = StyleSheet.create({\r\n-  container: {\r\n-    flex: 1,\r\n-    marginTop: 40,\r\n-  },\r\n-  background: {\r\n-    width: width,\r\n-    height: height,\r\n-    justifyContent: \"center\",\r\n-    alignItems: \"center\",\r\n-  },\r\n-  overlay: {\r\n-    ...StyleSheet.absoluteFillObject,\r\n-    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n-  },\r\n-  content: {\r\n-    width: width - 50,\r\n-    backgroundColor: \"white\",\r\n-    justifyContent: \"center\",\r\n-    alignItems: \"center\",\r\n-    borderRadius: 10,\r\n-    zIndex: 1,\r\n-  },\r\n-  loc: {\r\n-    margin: 50,\r\n-    height: 180,\r\n-    width: 180,\r\n-  },\r\n-  title: {\r\n-    fontSize: 27,\r\n-    fontWeight: \"800\",\r\n-    color: \"#414141\",\r\n-    textAlign: \"center\",\r\n-    fontFamily: \"Poppins-SemiBold\",\r\n-  },\r\n-  subtitle: {\r\n-    fontSize: 16,\r\n-    fontWeight: \"400\",\r\n-    color: \"#A0A0A0\",\r\n-    textAlign: \"center\",\r\n-    marginTop: 10,\r\n-    marginHorizontal: 30,\r\n-    fontFamily: \"Poppins-Regular\",\r\n-  },\r\n-  button: {\r\n-    width: \"90%\",\r\n-    margin: 30,\r\n-  },\r\n-  btntext: {\r\n-    textAlign: \"center\",\r\n-    color: \"#FFFFFF\",\r\n-    backgroundColor: \"#5089A3\",\r\n-    borderRadius: 10,\r\n-    fontSize: 20,\r\n-    padding: 20,\r\n-    fontWeight: \"600\",\r\n-    fontFamily: \"Poppins-SemiBold\",\r\n-  },\r\n-  btntext2: {\r\n-    textAlign: \"center\",\r\n-    color: \"#B8B8B8\",\r\n-    borderRadius: 10,\r\n-    fontSize: 20,\r\n-    padding: 20,\r\n-    fontWeight: \"600\",\r\n-    fontFamily: \"Poppins-SemiBold\",\r\n-  },\r\n-});\r\n"
                }
            ],
            "date": 1742801603848,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from \"react\";\r\nimport { View, Text, Image, ImageBackground, StyleSheet, Dimensions, TouchableOpacity, Alert } from \"react-native\";\r\nimport * as Location from \"expo-location\";\r\nimport { useRouter } from \"expo-router\";\r\n\r\nconst { width, height } = Dimensions.get(\"window\");\r\n\r\nexport default function EL() {\r\n    const router = useRouter();\r\n    const [isLocationEnabled, setIsLocationEnabled] = useState(false);\r\n\r\n    // Function to check if location is already enabled\r\n    const checkLocationPermission = async () => {\r\n        const { status } = await Location.getForegroundPermissionsAsync();\r\n        if (status === \"granted\") {\r\n            setIsLocationEnabled(true);\r\n            router.push(\"/welcome\"); // Navigate immediately if location is already enabled\r\n        }\r\n    };\r\n\r\n    // Function to request location permissions\r\n    const requestLocationPermission = async () => {\r\n        const { status } = await Location.requestForegroundPermissionsAsync();\r\n        if (status !== \"granted\") {\r\n            Alert.alert(\r\n                \"Location Access Denied\",\r\n                \"Please enable location services in your settings.\",\r\n                [{ text: \"OK\" }]\r\n            );\r\n            return;\r\n        }\r\n\r\n        // Get user's location\r\n        const location = await Location.getCurrentPositionAsync({});\r\n        console.log(\"User's location:\", location);\r\n\r\n        Alert.alert(\"Location Enabled\", \"Your location has been accessed successfully.\", [\r\n            { text: \"OK\", onPress: () => router.push(\"/welcome\") } // Navigate after success\r\n        ]);\r\n    };\r\n\r\n    // Check location status on mount\r\n    useEffect(() => {\r\n        checkLocationPermission();\r\n    }, []);\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <ImageBackground source={require(\"../assets/images/loc2.png\")} style={styles.background}>\r\n                {/* Dark overlay */}\r\n                <View style={styles.overlay} />\r\n                {/* Centered Container */}\r\n                <View style={styles.content}>\r\n                    <View>\r\n                        <Image style={styles.loc} source={require(\"../assets/images/loc.png\")} />\r\n                    </View>\r\n                    <Text style={styles.title}>Enable your location</Text>\r\n                    <Text style={styles.subtitle}>\r\n                        Choose your location to start finding requests around you.\r\n                    </Text>\r\n                    <TouchableOpacity style={styles.button} onPress={requestLocationPermission}>\r\n                        <Text style={styles.btntext}>Use my location</Text>\r\n                    </TouchableOpacity>\r\n                    <TouchableOpacity style={{ marginBottom: 40 }}>\r\n                        <Text style={styles.btntext2}>Skip for now</Text>\r\n                    </TouchableOpacity>\r\n                </View>\r\n            </ImageBackground>\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    marginTop: 40,\r\n  },\r\n  background: {\r\n    width: width,\r\n    height: height,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  overlay: {\r\n    ...StyleSheet.absoluteFillObject,\r\n    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n  },\r\n  content: {\r\n    width: width - 50,\r\n    backgroundColor: \"white\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: 10,\r\n    zIndex: 1,\r\n  },\r\n  loc: {\r\n    margin: 50,\r\n    height: 180,\r\n    width: 180,\r\n  },\r\n  title: {\r\n    fontSize: 27,\r\n    fontWeight: \"800\",\r\n    color: \"#414141\",\r\n    textAlign: \"center\",\r\n    fontFamily: \"Poppins-SemiBold\",\r\n  },\r\n  subtitle: {\r\n    fontSize: 16,\r\n    fontWeight: \"400\",\r\n    color: \"#A0A0A0\",\r\n    textAlign: \"center\",\r\n    marginTop: 10,\r\n    marginHorizontal: 30,\r\n    fontFamily: \"Poppins-Regular\",\r\n  },\r\n  button: {\r\n    width: \"90%\",\r\n    margin: 30,\r\n  },\r\n  btntext: {\r\n    textAlign: \"center\",\r\n    color: \"#FFFFFF\",\r\n    backgroundColor: \"#5089A3\",\r\n    borderRadius: 10,\r\n    fontSize: 20,\r\n    padding: 20,\r\n    fontWeight: \"600\",\r\n    fontFamily: \"Poppins-SemiBold\",\r\n  },\r\n  btntext2: {\r\n    textAlign: \"center\",\r\n    color: \"#B8B8B8\",\r\n    borderRadius: 10,\r\n    fontSize: 20,\r\n    padding: 20,\r\n    fontWeight: \"600\",\r\n    fontFamily: \"Poppins-SemiBold\",\r\n  },\r\n});\r\n"
        }
    ]
}